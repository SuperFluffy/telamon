var searchIndex = {};
searchIndex["telamon"] = {"doc":"","items":[[0,"codegen","telamon","Helpers to generate code from an IR instance and fully specified decisions.",null,null],[3,"Dimension","telamon::codegen","An iteration dimension composed of one or mure fused dimensions.",null,null],[3,"InductionLevel","","An induction level associated to a dimension.",null,null],[12,"ind_var","","",0,null],[12,"increment","","",0,null],[12,"base","","",0,null],[3,"InductionVar","","An induction variable, composed of multiple induction variable levels.",null,null],[12,"id","","",1,null],[12,"value","","",1,null],[3,"Function","","A function ready to execute on a device, derived from a constrained IR instance.",null,null],[3,"InternalMemBlock","","A memory block allocated by the kernel.",null,null],[3,"Instruction","","An instruction to execute.",null,null],[3,"NameMap","","Maps variables to names.",null,null],[4,"Cfg","","Represents a CFG of the targeted device.",null,null],[13,"Root","","Represents the root node of the CFG.",2,null],[13,"Loop","","Represents a loop in the CFG.",2,null],[13,"Instruction","","Represents an instruction in the CFG.",2,null],[13,"Threads","","Defines the set of active thread dimensions.",2,null],[4,"ParamVal","","Represents the value of a parameter passed to the kernel by the host.",null,null],[13,"External","","A parameter given by the caller.",3,null],[13,"Size","","A tiled dimension size computed on the host.",3,null],[13,"GlobalMem","","A pointer to a global memory block, allocated by the wrapper.",3,null],[4,"ParamValKey","","Uniquely identifies a `ParamVal`.",null,null],[13,"External","","",4,null],[13,"Size","","",4,null],[13,"GlobalMem","","",4,null],[4,"AllocationScheme","","Indicates how is a memory block allocated.",null,null],[13,"Global","","",5,null],[13,"PrivatisedGlobal","","",5,null],[13,"Shared","","",5,null],[4,"Value","","A value that can be named.",null,null],[13,"InductionLevel","","",6,null],[13,"Operand","","",6,null],[11,"dimensions","","Iterates over the dimensions of the `Cfg`.",2,null],[11,"instructions","","Iterates over the instructions of the `Cfg`.",2,null],[11,"induction_levels","","Iterates over the induction levels in the `Cfg`.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns the ID of the representant.",7,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"kind","","Returns the kind of the dimension.",7,{"inputs":[{"name":"self"}],"output":{"name":"dimkind"}}],[11,"size","","Returns the size of the dimensions.",7,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"dim_ids","","Returns the ids of the `ir::Dimensions` represented by this dimension.",7,null],[11,"induction_levels","","Returns the induction levels handled by this loop.",7,null],[11,"drain_induction_levels","","Gives the ownership on the induction levels computed by the dimension.",7,{"inputs":[{"name":"self"}],"output":{"generics":["inductionlevel"],"name":"vec"}}],[11,"merge_from","","Merge another `Dimension` into this one.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",7,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"t","","Returns the type of the value created by the induction level.",0,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",0,null],[11,"host_values","","Returns the values to pass from the host to the device to implement `self`.",1,null],[11,"build","","Creates a device `Function` from an IR instance.",8,{"inputs":[{"name":"searchspace"}],"output":{"name":"function"}}],[11,"thread_dims","","Returns the ordered list of thread dimensions.",8,null],[11,"block_dims","","Returns the ordered list of block dimensions.",8,null],[11,"dimensions","","Iterates other all `codegen::Dimension`.",8,null],[11,"induction_vars","","Returns the list of induction variables.",8,null],[11,"num_threads","","Returns the total number of threads to allocate.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"device_code_args","","Returns the values to pass from the host to the device.",8,null],[11,"cfg","","Returns the control flow graph.",8,{"inputs":[{"name":"self"}],"output":{"name":"cfg"}}],[11,"induction_levels","","Returns all the induction levels in the function.",8,null],[11,"mem_blocks","","Returns the memory blocks allocated by the function.",8,null],[11,"space","","Returns the underlying implementation space.",8,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"init_induction_levels","","Returns the induction levels computed at the beginning of the kernel. Levels must be computed in the provided order.",8,null],[11,"deref","","",8,null],[11,"from_operand","","Builds the `ParamVal` needed to implement an operand, if any.",3,{"inputs":[{"name":"operand"},{"name":"searchspace"}],"output":{"name":"option"}}],[11,"from_size","","Builds the `ParamVal` needed to get a size value, if any.",3,{"inputs":[{"name":"size"}],"output":{"name":"option"}}],[11,"t","","Returns the type of the parameter.",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"is_pointer","","Indicates if the parameter is a pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","Returns a unique identifier for the `ParamVal`.",3,{"inputs":[{"name":"self"}],"output":{"name":"paramvalkey"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"paramvalkey"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"allocationscheme"}],"output":{"name":"bool"}}],[11,"new","","Creates a new InternalMemBlock from an `ir::mem::Internal`.",9,{"inputs":[{"name":"internalblock"},{"name":"option"},{"name":"searchspace"}],"output":{"name":"self"}}],[11,"host_values","","Returns the value to pass from the host to the device to implement `self`.",9,null],[11,"id","","Returns the memory ID.",9,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"alloc_scheme","","Indicates how is the memory block allocated.",9,{"inputs":[{"name":"self"}],"output":{"name":"allocationscheme"}}],[11,"alloc_size","","Generates the size of the memory to allocate.",9,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"local_size","","Returns the size of the part of the allocated memory accessible by each thread.",9,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"mem_space","","Returns the memory space the block is allocated in.",9,{"inputs":[{"name":"self"}],"output":{"name":"memspace"}}],[11,"ptr_type","","Returns the type of the pointer to the memory block.",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new","","Creates a new `Instruction`.",10,{"inputs":[{"name":"instruction"},{"name":"searchspace"}],"output":{"name":"self"}}],[11,"id","","Returns the ID of the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"host_values","","Returns the values to pass from the host to implement this instruction.",10,null],[11,"t","","Returns the type of the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operator","","Returns the operator computed by the instruction.",10,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"instantiation_dims","","Returns the dimensions on which to instantiate the instruction.",10,null],[11,"as_reduction","","Indicates if the instruction performs a reduction, in wich case it returns the instruction that initializes the reduction, the `DimMap` to readh it and the reduction dimensions.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mem_flag","","Returns the memory flag of the intruction, if any.",10,{"inputs":[{"name":"self"}],"output":{"generics":["instflag"],"name":"option"}}],[11,"has_side_effects","","Indicates if the instruction has observable side effects.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"new","","Creates a new `NameMap`.",11,{"inputs":[{"name":"function"},{"name":"namer"}],"output":{"name":"self"}}],[11,"gen_name","","Generates a variable of the given `Type`.",11,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"string"}}],[11,"gen_loop_id","","Generates an ID for a loop.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"name","","",11,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_op","","Asigns a name to an operand.",11,{"inputs":[{"name":"self"},{"name":"operand"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_inst","","Returns the name of the instruction.",11,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"str"}}],[11,"name_inst_id","","Returns the name of the instruction.",11,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"dimmap"}],"output":{"name":"str"}}],[11,"name_index","","Returns the name of an index.",11,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"str"}}],[11,"set_current_index","","Set the current index of an unrolled dimension.",11,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"u32"}],"output":null}],[11,"unset_current_index","","Unset the current index of an unrolled dimension.",11,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":null}],[11,"indexed_inst_name","","",11,{"inputs":[{"name":"self"},{"name":"instruction"},{"name":"id"},{"name":"u32"}],"output":{"name":"string"}}],[11,"indexed_op_name","","",11,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"id"},{"name":"u32"}],"output":{"name":"string"}}],[11,"name_param","","Returns the name of a variable representing a parameter.",11,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_param_val","","Returns the name of a variable representing a parameter value.",11,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_addr","","Returns the name of the address of a memory block.",11,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"generics":["str"],"name":"cow"}}],[11,"name_induction_var","","Assigns a name to an induction variable.",11,{"inputs":[{"name":"self"},{"name":"indvarid"},{"generics":["id"],"name":"option"}],"output":{"generics":["str"],"name":"cow"}}],[11,"declare_size_cast","","Declares a size cast. Returns the name of the variable only if a new variable was allcoated.",11,{"inputs":[{"name":"self"},{"name":"size"},{"name":"type"}],"output":{"generics":["string"],"name":"option"}}],[11,"name_size","","Assigns a name of a value to a size.",11,{"inputs":[{"name":"self"},{"name":"size"},{"name":"type"}],"output":{"generics":["str"],"name":"cow"}}],[11,"side_effect_guard","","Returns the side-effect guard, if any is set.",11,{"inputs":[{"name":"self"}],"output":{"generics":["rcstr"],"name":"option"}}],[11,"set_side_effect_guard","","Sets the predicate to use in front of side-effect instruction.",11,{"inputs":[{"name":"self"},{"generics":["rcstr"],"name":"option"}],"output":null}],[8,"Namer","","Assign names to variables.",null,null],[10,"name","","Provides a name for a variable of the given type.",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"string"}}],[10,"name_param","","Generates a name for a parameter.",12,{"inputs":[{"name":"self"},{"name":"paramvalkey"}],"output":{"name":"string"}}],[10,"name_float","","Provides a name for a floating point constant.",12,{"inputs":[{"name":"self"},{"name":"ratio"},{"name":"u16"}],"output":{"name":"string"}}],[10,"name_int","","Provides a name for an integer constant.",12,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"u16"}],"output":{"name":"string"}}],[0,"helper","telamon","Helper functions to build an IR instance.",null,null],[3,"Builder","telamon::helper","Helper to build a `Function`.",null,null],[3,"SignatureBuilder","","Helper struct to build a `Signature`.",null,null],[3,"Reduce","","Helper to build `Reduce` operands.",null,null],[12,"0","","",13,null],[3,"TmpArray","","Helper to build dim maps that can be lowered to temporary memory.",null,null],[12,"0","","",14,null],[3,"DimGroup","","A groups of dimensions that act as a single logical dimension.",null,null],[11,"new","","Creates a new `Builder` for a `Function` with the given signature.",15,{"inputs":[{"name":"signature"},{"name":"device"}],"output":{"name":"builder"}}],[11,"get","","Returns the function created by the builder",15,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"get_clone","","Returns the function created by the builder",15,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"binop","","Creates a binary operator.",15,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"add","","Adds an `Add` instruction to the fuction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"sub","","Adds a `Sub` instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mul","","Adds a `Mul` instruction to the function. Defaults to low mode.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mul_ex","","Adds a 'Mul` instruction with a wide mode to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"type"}],"output":{"name":"instid"}}],[11,"mad","","Adds a `Mad` or `Fma` instruction to the function. Defaults to low or wide mode depending on the operand types.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"div","","Adds a `Div` instruction to the fuction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"mov","","Adds a `Mov` instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"autooperand"}],"output":{"name":"instid"}}],[11,"ld","","Adds a coherent load from global memory instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"ld_nc","","Adds a non-coherent load from global memory instruction to the function.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"ld_ex","","Adds a load instruction with the given flags and memory block.",15,{"inputs":[{"name":"self"},{"name":"type"},{"name":"autooperand"},{"name":"accesspattern"},{"name":"instflag"}],"output":{"name":"instid"}}],[11,"st","","Adds a store instruction.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"accesspattern"}],"output":{"name":"instid"}}],[11,"st_ex","","Adds a store instruction with the given flags and memory block.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"autooperand"},{"name":"bool"},{"name":"accesspattern"},{"name":"instflag"}],"output":{"name":"instid"}}],[11,"cast","","Adds a cast instruction to the given type.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"type"}],"output":{"name":"instid"}}],[11,"type_of","","Returns the type of an operand.",15,{"inputs":[{"name":"self"},{"name":"autooperand"}],"output":{"name":"type"}}],[11,"order","","Restricts the order between two basic blocks. Does not restricts LINK and NPACK flags.",15,{"inputs":[{"name":"self"},{"name":"metabasicblock"},{"name":"metabasicblock"},{"name":"order"}],"output":null}],[11,"tensor_access","","Builds both an induction variable for a tensor memory access and the corresponding access pattern.",15,null],[11,"action","","Applies an action on the function.",15,{"inputs":[{"name":"self"},{"name":"action"}],"output":null}],[11,"open_dim","","Opens a new dimension.",15,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"id"}}],[11,"open_dim_ex","","Opens a nest of new dimension with the given kinds and sizes.",15,{"inputs":[{"name":"self"},{"name":"size"},{"name":"dimkind"}],"output":{"name":"id"}}],[11,"open_tiled_dim","","Open multiple dimensions to represent a tiled dimension.",15,null],[11,"open_mapped_dim","","Opens a new dimension mapped to an existing one.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":{"name":"dimgroup"}}],[11,"reopen_dim","","Opens an existing dimension.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":null}],[11,"reopen_mapped_dim","","Opens an existing dimension and maps it to another one. The dimension mapped to is closed if needed.",15,{"inputs":[{"name":"self"},{"name":"metadimension"},{"name":"metadimension"}],"output":null}],[11,"close_dim","","Closes a dimension.",15,{"inputs":[{"name":"self"},{"name":"metadimension"}],"output":null}],[11,"cst_size","","Returns a constant size.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"size"}}],[11,"param_size","","Returns a parameter size.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"size"}}],[11,"tile_size","","Returns a tiled size.",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"size"}}],[11,"size","","Returns a size from the given parameters, dividend and divisor.",15,null],[11,"allocate_shared","","Allocates a memory block in shared memory.",15,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"internalid"}}],[11,"allocate","","Allocates a memory block.",15,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"}],"output":{"name":"internalid"}}],[11,"unknown_access_pattern","","Generates an access paterns with all the strides unknown on the opened dimensions.",15,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"accesspattern"}}],[11,"tensor_access_pattern","","Generates the access pattern corresponding to accessing a tensor of the given type. The data is assumed to be laid out contiguously in the order given by dimensions. The last dimension is the major order.",15,null],[11,"induction_var","","Builds an induction variable.",15,{"inputs":[{"name":"self"},{"name":"autooperand"},{"name":"vec"}],"output":{"name":"indvarid"}}],[11,"dim_map","","Creates a dim-map operand.",15,null],[11,"find_param","","Finds a paramter given its name.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"parameter"}}],[11,"get","","",13,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","","",14,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"new","","Creates a new builder for a function with the given name.",16,{"inputs":[{"name":"str"},{"name":"am"}],"output":{"name":"self"}}],[11,"scalar","","Creates a new parameter and binds it to the given value.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"array","","Creates a new parameter and binds it to a freshly allocated an array.",16,null],[11,"tensor","","Allocates an n-dimensional array.",16,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["dimsize"],"name":"vec"},{"name":"bool"}],"output":{"name":"tensor"}}],[11,"get","","Returns the `Signature` created by the builder.",16,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"context","","Returns the underlying context.",16,{"inputs":[{"name":"self"}],"output":{"name":"am"}}],[0,"tensor","","Utilities to allocate and operate on tensors.",null,null],[3,"DimSize","telamon::helper::tensor","A dimension size, before tiling.",null,null],[3,"TensorBuilder","","An helper to build a tensor.",null,null],[3,"Tensor","","A tensor allocated in main memory.",null,null],[3,"VirtualTensor","","A tensor loaded in registers.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dimsize"}}],[11,"into_ir_size","","Convert the size into the size type used by the IR.",17,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"size"}}],[11,"eval","","Converts the size into a numerical value for a given context.",17,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"u32"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new","","Start building a `Tensor` with the given logical layout.",18,{"inputs":[{"name":"str"},{"generics":["dimsize"],"name":"vec"}],"output":{"name":"self"}}],[11,"transpose","","Swap two dimensions in the memory layout of the tensor. Keeps the logical layout untouched.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stride_dim","","Removes a logical dimension but keeps it in the storage.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"enable_writes","","Allows writing to the tensor.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"finish","","Builds the `Tensor`.",18,{"inputs":[{"name":"self"},{"name":"signaturebuilder"}],"output":{"name":"tensor"}}],[11,"new","","Allocates a new `Tensor` in the context.",19,{"inputs":[{"name":"str"},{"generics":["dimsize"],"name":"vec"},{"name":"bool"},{"name":"id"},{"generics":["arrayargument"],"name":"arc"}],"output":{"name":"self"}}],[11,"load","","Creates a `VirtualTensor` that contains the values of `self`, loaded in registers.",19,null],[11,"read_to_host","","Reads the tensor value in the context and copies it on the host.",19,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"arrayd"}}],[11,"new","","Creates a new `VirtualTensor`.",20,{"inputs":[{"name":"instid"},{"generics":["dimgroup"],"name":"vec"}],"output":{"name":"self"}}],[11,"dim_map","","Creates an operand that yeilds the values of the tensor in the given loop nest.",20,null],[11,"store","","Stores the `VirtualTensor` in memory.",20,{"inputs":[{"name":"self"},{"name":"tensor"},{"name":"builder"}],"output":{"name":"virtualtensor"}}],[11,"inst","","Returns the underlying instruction.",20,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"index","","",20,null],[8,"AutoOperand","telamon::helper","Represents values that can be turned into an `Operand`.",null,null],[10,"get","","Returns the corresponding `Operand`.",21,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[8,"MetaDimension","","A logical dimension, possible composed of multiple nested dimensions.",null,null],[10,"ids","","Returns the ids of the underlying dimensions.",22,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[8,"MetaBasicBlock","","A logical basic block, that can actually be implemented by multiple ones.",null,null],[10,"ids","","Returns the ids on the underlying basic blocks.",23,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"dimgroup"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"dimgroup"}}],[11,"new","","Creates a dimension group containing the given dimensions.",24,{"inputs":[{"generics":["id"],"name":"vec"}],"output":{"name":"self"}}],[11,"iter","","Iterates over the sub-dimensions of the group.",24,{"inputs":[{"name":"self"}],"output":{"generics":["iter"],"name":"cloned"}}],[11,"ids","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[11,"index","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"id"}}],[0,"device","telamon","Code generation and candidate evaluation for specific targets.",null,null],[4,"EvalMode","telamon::device","Indicates how evaluation should be performed.",null,null],[13,"FindBest","","Find the best candidate, skip bad candidates and allow optimizations.",25,null],[13,"TestBound","","Test the performance model, do not skip candidates and do not optimize.",25,null],[5,"read_array","","Copies the array to the host, interpreting it as an array of `T`.",null,{"inputs":[{"name":"arrayargument"}],"output":{"name":"vec"}}],[5,"write_array","","Copies an values to the device array from the host array given as argument.",null,null],[0,"x86","","Defines the CPU target.",null,null],[3,"Context","telamon::device::x86","A CPU evaluation context.",null,null],[3,"Cpu","","Represents CUDA GPUs.",null,null],[12,"name","","The name of the CPU.",26,null],[11,"new","","Create a new evaluation context.",27,{"inputs":[],"output":{"name":"context"}}],[11,"get_param","","Returns a parameter given its name.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"argument"}}],[11,"bind_scalar","","",27,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"s"}],"output":null}],[11,"bind_array","","",27,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"usize"}],"output":{"name":"arc"}}],[11,"device","","",27,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"param_as_size","","",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u32"],"name":"option"}}],[11,"evaluate","","Evaluation in sequential mode",27,{"inputs":[{"name":"self"},{"name":"function"},{"name":"evalmode"}],"output":{"generics":["f64"],"name":"result"}}],[11,"benchmark","","returns a vec containing num_sample runs of function_evaluate",27,{"inputs":[{"name":"self"},{"name":"function"},{"name":"usize"}],"output":{"generics":["f64"],"name":"vec"}}],[11,"async_eval","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"evalmode"},{"name":"fn"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"cpu"}}],[11,"dummy_cpu","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"print","","",26,{"inputs":[{"name":"self"},{"name":"function"},{"name":"write"}],"output":null}],[11,"is_valid_type","","",26,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"max_block_dims","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"max_threads","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"max_unrolling","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"can_vectorize","","",26,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"operator"}],"output":{"name":"bool"}}],[11,"shared_mem","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"supports_nc_access","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_l1_access","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_l2_access","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"add_block_overhead","","",26,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"hwpressure"}],"output":null}],[11,"lower_type","","",26,{"inputs":[{"name":"self"},{"name":"type"},{"name":"searchspace"}],"output":{"generics":["type"],"name":"option"}}],[11,"hw_pressure","","",26,{"inputs":[{"name":"self"},{"name":"searchspace"},{"name":"hashmap"},{"name":"hashmap"},{"name":"basicblock"},{"name":"context"}],"output":{"name":"hwpressure"}}],[11,"loop_iter_pressure","","",26,null],[11,"thread_rates","","",26,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[11,"block_rates","","",26,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[11,"total_rates","","",26,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[11,"bottlenecks","","",26,null],[11,"block_parallelism","","",26,{"inputs":[{"name":"self"},{"name":"searchspace"}],"output":{"name":"u32"}}],[11,"additive_indvar_pressure","","",26,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[11,"multiplicative_indvar_pressure","","",26,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[11,"clone","telamon::device","",25,{"inputs":[{"name":"self"}],"output":{"name":"evalmode"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"evalmode"}],"output":{"name":"bool"}}],[6,"AsyncCallback","","A callback that is called after evaluating a kernel.",null,null],[8,"ScalarArgument","","Represents a value that can be used as a `Function` argument. Must ensures the type is a scalar and does not contains any reference.",null,null],[11,"as_size","","Returns the argument interpreted as an iteration dimension size, if applicable.",28,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"t","","Returns the type of the argument.",28,{"inputs":[],"output":{"name":"type"}}],[10,"raw_ptr","","Returns a raw pointer to the object.",28,null],[10,"as_operand","","Returns an operand holding the argument value as a constant.",28,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[10,"gen_random","","Generates a random instance of the argument type.",28,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"ArrayArgument","","Represents an array on the device.",null,null],[10,"read_i8","","Copies the array to the host as a vector of bytes.",29,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"vec"}}],[10,"write_i8","","Copies an array to the device from a slice of bytes.",29,null],[8,"Context","","Describes the context for which a function must be optimized.",null,null],[10,"device","","Returns the description of the device the code runs on.",30,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[10,"evaluate","","Returns the execution time of a fully specified implementation in nanoseconds.",30,{"inputs":[{"name":"self"},{"name":"function"},{"name":"evalmode"}],"output":{"generics":["f64"],"name":"result"}}],[10,"benchmark","","Compiles and benchmarks a functions. As opposed to `Self::evaluate`, the measured time contains potential startup times.",30,{"inputs":[{"name":"self"},{"name":"function"},{"name":"usize"}],"output":{"generics":["f64"],"name":"vec"}}],[10,"async_eval","","Calls the `inner` closure in parallel, and gives it a pointer to an `AsyncEvaluator` to evaluate candidates in the context. `skip_bad_bounds` indicates than candidates whose bound is aboive the best candidate should be skiped.",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"evalmode"},{"name":"fn"}],"output":null}],[10,"param_as_size","","Returns a parameter interpreted as a size, if possible.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u32"],"name":"option"}}],[11,"eval_size","","Evaluate a size.",30,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"u32"}}],[8,"ArgMap","","Binds the argument names to their values.",null,null],[16,"Array","","",31,null],[10,"bind_scalar","","Binds a parameter to a given value.",31,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"s"}],"output":null}],[10,"bind_array","","Allocates an array of the given size in bytes.",31,{"inputs":[{"name":"self"},{"name":"parameter"},{"name":"usize"}],"output":{"name":"arc"}}],[8,"AsyncEvaluator","","An evaluation context that runs kernels asynchronously on the target device.",null,null],[10,"add_kernel","","Add a kernel to evaluate.",32,{"inputs":[{"name":"self"},{"name":"candidate"},{"name":"asynccallback"}],"output":null}],[8,"Device","","Holds the specifications of a target.",null,null],[10,"print","","Prints the code corresponding to a device `Function`.",33,{"inputs":[{"name":"self"},{"name":"function"},{"name":"write"}],"output":null}],[10,"is_valid_type","","Indicates if a `Type` can be implemented on the device.",33,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[10,"max_block_dims","","Returns the maximal number of block dimensions.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"max_threads","","Returns the maximal number of threads.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"max_unrolling","","Returns the maximal unrolling factor.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"can_vectorize","","Indicates if vectorization is possible on a loop with size Size on this instruction.",33,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"operator"}],"output":{"name":"bool"}}],[10,"shared_mem","","Returns the amount of shared memory available for each thread block.",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"supports_nc_access","","Indicates if the device supports non-coherent memory accesses.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_l1_access","","Indicates if the device supports L1 for global memory accesses.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_l2_access","","Indicates if the device supports L2 for global memory accesses.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"name","","Returns the name of the device.",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"hw_pressure","","Returns the pressure cause by a `BasicBlock`. For a dimension, returns the pressure for the full loop execution.",33,{"inputs":[{"name":"self"},{"name":"searchspace"},{"name":"hashmap"},{"name":"hashmap"},{"name":"basicblock"},{"name":"context"}],"output":{"name":"hwpressure"}}],[10,"loop_iter_pressure","","Returns the pressure produced by a single iteration of a loop and the latency overhead of iterations.",33,null],[10,"thread_rates","","Returns the processing rates of a single thread, in units/ns",33,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"block_rates","","Returns the processing rates of a single block, in units/ns.",33,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"total_rates","","Returns the processing rates of the whole accelerator un units/ns.",33,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[10,"bottlenecks","","Returns the names of potential bottlenecks.",33,null],[10,"block_parallelism","","Returns the number of blocks that can be executed in parallel on the device.",33,{"inputs":[{"name":"self"},{"name":"searchspace"}],"output":{"name":"u32"}}],[10,"additive_indvar_pressure","","Returns the pressure caused by an additive induction variable level.",33,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[10,"multiplicative_indvar_pressure","","Returns the pressure caused by a multiplicative induction variable level.",33,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"hwpressure"}}],[10,"add_block_overhead","","Adds the overhead (per instance) due to partial wraps and predicated dimensions to the pressure. If the instruction is not predicated, `predicated_dims_size` should be `1`.",33,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"hwpressure"}],"output":null}],[10,"lower_type","","Lowers a type using the memory space information. Returns `None` if some information is not yet specified.",33,{"inputs":[{"name":"self"},{"name":"type"},{"name":"searchspace"}],"output":{"generics":["type"],"name":"option"}}],[11,"gen_code","","Builds and outputs a constrained IR instance.",33,{"inputs":[{"name":"self"},{"name":"searchspace"},{"name":"write"}],"output":null}],[0,"explorer","telamon","exploration of the search space.",null,null],[3,"Candidate","telamon::explorer","A node of the search tree.",null,null],[12,"space","","Represents a part of the full search space.",34,null],[12,"bound","","Gives a lower bound in nanoseconds on the execution time of `fun`.",34,null],[12,"depth","","The depth of the candidate in the search tree.",34,null],[12,"actions","","The list of actions already taken.",34,null],[5,"find_best","","Entry point of the exploration. This function returns the best candidate that it has found in the given time (or at whatever point we decided to stop the search - potentially after an exhaustive search)",null,{"inputs":[{"name":"config"},{"name":"context"},{"generics":["searchspace"],"name":"vec"}],"output":{"generics":["searchspace"],"name":"option"}}],[5,"find_best_ex","","Same as `find_best`, but allows to specify pre-existing actions and also returns the actionsfor the best candidate.",null,{"inputs":[{"name":"config"},{"name":"context"},{"generics":["candidate"],"name":"vec"}],"output":{"generics":["candidate"],"name":"option"}}],[5,"gen_space","","Explores the full search space.",null,{"inputs":[{"name":"context"},{"name":"searchspace"},{"name":"f"},{"name":"g"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"candidate"}}],[11,"new","","Creates a new candidate, with depth 0.",34,{"inputs":[{"name":"searchspace"},{"name":"bound"}],"output":{"name":"self"}}],[11,"apply_choice","","",34,{"inputs":[{"name":"self"},{"name":"context"},{"generics":["actionex"],"name":"vec"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"apply_decision","","Applies a choice to a candidate.",34,{"inputs":[{"name":"self"},{"name":"context"},{"name":"actionex"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"candidate"}],"output":{"name":"ordering"}}],[0,"config","","Defines a structure to store the configuration of the exploration. The configuration is read from the `Setting.toml` file if it exists. Some parameters can be overridden from the command line.",null,null],[3,"Config","telamon::explorer::config","Stores the configuration of the exploration.",null,null],[12,"log_file","","Name of the file in wich to store the logs.",35,null],[12,"num_workers","","Number of exploration threads.",35,null],[12,"stop_bound","","Indicates the search must be stopped if a candidate with an execution time better than the bound (in ns) is found.",35,null],[12,"timeout","","Indicates the search must be stopped after the given number of minutes.",35,null],[12,"max_evaluations","","Indicates the search must be stopped after the given number of candidates have been evaluated.",35,null],[12,"distance_to_best","","A percentage cut indicate that we only care to find a candidate that is in a certain range above the best Therefore, if cut_under is 20%, we can discard any candidate whose bound is above 80% of the current best.",35,null],[12,"algorithm","","Exploration algorithm to use. Needs to be last for TOML serialization, because it is a table.",35,null],[3,"BanditConfig","","Configuration parameters specific to the multi-armed bandit algorithm.",null,null],[12,"new_nodes_order","","Indicates how to select between nodes of the search tree when none of their children have been evaluated.",36,null],[12,"old_nodes_order","","Indicates how to choose between nodes with at least one children evaluated.",36,null],[12,"threshold","","The number of best execution times to remember.",36,null],[12,"delta","","The biggest delta is, the more focused on the previous best candidates the exploration is.",36,null],[12,"monte_carlo","","If true, does not expand tree until end - instead, starts a montecarlo descend after each expansion of a node",36,null],[4,"SearchAlgorithm","","Exploration algorithm to use.",null,null],[13,"BoundOrder","","Evaluate all the candidates that cannot be pruned.",37,null],[13,"MultiArmedBandit","","Use a multi-armed bandit algorithm.",37,null],[4,"NewNodeOrder","","Indicates how to choose between nodes of the search tree when no children have been evaluated.",null,null],[13,"Api","","Consider the nodes in the order given by the search space API.",38,null],[13,"Random","","Consider the nodes in a random order.",38,null],[13,"Bound","","Consider the nodes with the lowest bound first.",38,null],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the distance between the cut and the bound.",38,null],[4,"OldNodeOrder","","Indicates how to choose between nodes of the search tree with at least one descendent evaluated.",null,null],[13,"Bandit","","Use the weights from the bandit algorithm.",39,null],[13,"Bound","","Take the candidate with the best bound.",39,null],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the distance between the cut and the bound.",39,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"read","","Reads the configuration from the \"Settings.toml\" file and from the command line.",35,{"inputs":[],"output":{"name":"self"}}],[11,"read_from_file","","Extract the configuration from the configuration file, if any.",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"searchalgorithm"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"banditconfig"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"newnodeorder"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"oldnodeorder"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"self"}}],[0,"choice","telamon::explorer","Choices that can be applied to split the search space.",null,null],[4,"ActionEx","telamon::explorer::choice","Either a regular action or a manually applied action.",null,null],[13,"TileSizes","","",40,null],[13,"Action","","",40,null],[13,"LowerLayout","","",40,null],[12,"mem","telamon::explorer::choice::ActionEx","",40,null],[12,"st_dims","","",40,null],[12,"ld_dims","","",40,null],[5,"list","telamon::explorer::choice","Lists the choices that can be applied to a function.",null,null],[5,"fix_order","","Chooses an order between instructions and dimensions when multiple are possible. The function assumes the order between dimensions is already fixed.",null,{"inputs":[{"name":"searchspace"}],"output":{"name":"searchspace"}}],[6,"Choice","","Represents a choice that splits a search space in multiple ones.",null,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"actionex"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"actionex"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"actionex"}],"output":{"name":"bool"}}],[0,"local_selection","telamon::explorer","Provides different methods to select a candidate in a list.",null,null],[5,"descend","telamon::explorer::local_selection","A recursive function that takes a candidate and expands it until we have a completely specified candidate that we can pass to the evaluator, or we find a dead-end",null,{"inputs":[{"name":"newnodeorder"},{"name":"context"},{"name":"candidate"},{"name":"f64"}],"output":{"generics":["candidate"],"name":"option"}}],[5,"pick_candidate","","Called in montecarlo_descend, dispatch the choice of the next candidate according to our configuration",null,{"inputs":[{"name":"newnodeorder"},{"generics":["candidate"],"name":"vec"},{"name":"f64"}],"output":{"generics":["candidate"],"name":"option"}}],[5,"pick_index","","Returns the index of the next candidate to consider.",null,{"inputs":[{"name":"newnodeorder"},{"name":"it"},{"name":"f64"}],"output":{"generics":["usize"],"name":"option"}}],[0,"ir","telamon","Representation and manipulation of a set of possible implementation.",null,null],[3,"DimMap","telamon::ir","Represents a mapping between dimenions.",null,null],[3,"Dimension","","Represents an iteration dimension.",null,null],[3,"Function","","Describes a function and the set of its possible implementation.",null,null],[3,"Signature","","Holds the signature of a function.",null,null],[12,"name","","Mame of the function.",41,null],[12,"params","","Arguments of the function.",41,null],[12,"mem_blocks","","The number of external memory blocks.",41,null],[3,"Parameter","","Represents an argument of a function.",null,null],[12,"name","","The name of the `Parameter`",42,null],[12,"t","","The type of the `Parameter`.",42,null],[3,"InstId","","Uniquely identifies an instruction.",null,null],[12,"0","","",43,null],[3,"Instruction","","Represents an instruction.",null,null],[3,"IndVarId","","Unique identifier for `InductionVar`",null,null],[12,"0","","",44,null],[3,"InductionVar","","A multidimentional induction variable. No dimension should appear twice in dims.",null,null],[3,"Size","","The size of an iteration dimension. The size is of the form: `(factor * dividend_0 * dividend_1 * ...)) / divisor` where the reminder of the division is null.",null,null],[3,"NewObjs","","Stores the objects created by a lowering.",null,null],[12,"instructions","","",45,null],[12,"dimensions","","",45,null],[12,"basic_blocks","","",45,null],[12,"mem_blocks","","",45,null],[12,"internal_mem_blocks","","",45,null],[12,"mem_insts","","",45,null],[12,"iteration_dims","","",45,null],[12,"thread_dims","","",45,null],[3,"LoweredDimMap","","A point-to-point communication lowered into a store and a load.",null,null],[12,"mem","","",46,null],[12,"store","","",46,null],[12,"load","","",46,null],[12,"dimensions","","",46,null],[4,"Stride","","A stride on a given dimensions.",null,null],[13,"Int","","A fixed stride.",47,null],[13,"Unknown","","A stride that is not statically known.",47,null],[4,"AccessPattern","","",null,null],[13,"Unknown","","Unknown access pattern.",48,null],[12,"mem_id","telamon::ir::AccessPattern","",48,null],[13,"Tensor","telamon::ir","Access with a fixed stride on each dimensions. Accesses on two different dimensions should not overlap.",48,null],[12,"mem_id","telamon::ir::AccessPattern","",48,null],[12,"dims","","",48,null],[4,"BBId","telamon::ir","Provides a unique identifer for a basic block.",null,null],[13,"Inst","","",49,null],[13,"Dim","","",49,null],[4,"Operand","","Represents an instruction operand.",null,null],[13,"Int","","An integer constant, on a given number of bits.",50,null],[13,"Float","","A float constant, on a given number of bits.",50,null],[13,"Inst","","A value produced by an instruction. The boolean indicates if the `DimMap` can be lowered.",50,null],[13,"Index","","The current index in a loop.",50,null],[13,"Size","","The size of a dimension.",50,null],[13,"Param","","A parameter of the function.",50,null],[13,"Addr","","The address of a memory block.",50,null],[13,"Reduce","","The value of the current instruction at a previous iteration.",50,null],[13,"InductionVar","","A variable increased by a fixed amount at every step of some loops.",50,null],[4,"DimMapScope","","Indicates how dimensions can be mapped.",null,null],[13,"Local","","The dimensions are mapped within registers, without producing syncthreads.",51,null],[13,"Thread","","The dimensions are mapped within registers.",51,null],[13,"Global","","The dimensions are mapped, possibly using temporary memory.",51,null],[4,"BinOp","","Represents binary arithmetic operators.",null,null],[13,"Add","","Adds two operands.",52,null],[13,"Sub","","Substracts two operands.",52,null],[13,"Div","","Divides two operands,",52,null],[4,"Operator","","The operation performed by an instruction.",null,null],[13,"BinOp","","A binary arithmetic operator.",53,null],[13,"Mul","","Performs a multiplication with the given return type.",53,null],[13,"Mad","","Performs s multiplication between the first two operands and adds the result to the third.",53,null],[13,"Mov","","Moves a value into a register.",53,null],[13,"Ld","","Loads a value of the given type from the given address.",53,null],[13,"St","","Stores the second operand at the address given by the first. The boolean specifies if the instruction has side effects. A store has no side effects when it writes into a cell that previously had an undefined value.",53,null],[13,"TmpLd","","Represents a load from a temporary memory that is not fully defined yet.",53,null],[13,"TmpSt","","Represents a store to a temporary memory that is not fully defined yet.",53,null],[13,"Cast","","Casts a value into another type.",53,null],[4,"Type","","Values and intructions types.",null,null],[13,"Void","","Type for instructions that do not produce a value.",54,null],[13,"I","","Type for integer values, with a fixed number of bits.",54,null],[13,"F","","Type for floating point values, with a fixed number of bits.",54,null],[13,"PtrTo","","Pointer type of the given memory space.",54,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwrap the stride or return the given value.",47,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"accesspattern"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"accesspattern"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"accesspattern"}],"output":{"name":"bool"}}],[11,"stride","","Returns the stride on a given dimension.",48,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"stride"}}],[11,"mem_block","","Returns the id of the memory block accessed.",48,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"ordering"}}],[11,"hash","","",49,null],[11,"from","","",49,{"inputs":[{"name":"instid"}],"output":{"name":"self"}}],[11,"from","","",49,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new dimension.",55,{"inputs":[{"name":"size"},{"name":"id"}],"output":{"name":"dimension"}}],[11,"size","","Retruns the size of the dimension.",55,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"id","","Returns the id of the dimension.",55,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"iterated","","Returns the constructs iterated along this dimension.",55,null],[11,"add_iterated","","Adds a bb that is iterated along self.",55,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"is_thread_dim","","Indicates if the dimension is a thread dimension.",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_thread_dim","","Sets the dimension as a thread dimension.",55,{"inputs":[{"name":"self"}],"output":null}],[11,"bb_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_dim","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"hash","","",55,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dimmap"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `DimMap`.",56,{"inputs":[{"name":"it"}],"output":{"name":"self"}}],[11,"empty","","Returns an empty `DimMap`.",56,{"inputs":[],"output":{"name":"dimmap"}}],[11,"merge_dims","","Renames a basic block into an other. Indicates if some mapping were removed.",56,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"iter","","Iterates over the DimMap.",56,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"filter","","Filters the DimMap.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filterlist"}}],[11,"is_empty","","Returns true if the `DimMap` is empty.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",56,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parameter"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"new","","Creates a new function.",57,{"inputs":[{"name":"signature"},{"name":"device"}],"output":{"name":"self"}}],[11,"signature","","Returns the function signature.",57,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"device","","Returns the device the function is compiled for.",57,{"inputs":[{"name":"self"}],"output":{"name":"device"}}],[11,"add_inst","","Adds an instruction to the function.",57,{"inputs":[{"name":"self"},{"name":"operator"},{"generics":["id"],"name":"hashset"}],"output":{"name":"instid"}}],[11,"add_dim","","Creates a new dimension.",57,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"id"}}],[11,"add_mem_block","","Allocates a new memory block.",57,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"}],"output":{"name":"internalid"}}],[11,"add_ind_var","","Adds an induction variable.",57,{"inputs":[{"name":"self"},{"name":"inductionvar"}],"output":{"name":"indvarid"}}],[11,"insts","","Returns the list of instructions of the function.",57,null],[11,"dims","","Returns the list of dimensions of the function.",57,null],[11,"blocks","","Lists all `BasicBlock`s.",57,null],[11,"thread_dims","","Returns the list of thread dimensions.",57,null],[11,"inst","","Returns an instruction given its id.",57,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"instruction"}}],[11,"dim","","Retuns a dimension given its id.",57,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"dimension"}}],[11,"block","","Returns a `BasicBlock` given its id.",57,{"inputs":[{"name":"self"},{"name":"bbid"}],"output":{"name":"basicblock"}}],[11,"mem_blocks","","Returns the list of memory blocks. The block with id `i` is in i-th position.",57,null],[11,"mem_insts","","Iterates over memory instructions.",57,null],[11,"internal_mem_blocks","","Returns the internal memory blocks.",57,null],[11,"mem_block","","Returns a memory block given its id.",57,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"internal_mem_block","","Returns an internal memory block given its id.",57,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"internalblock"}}],[11,"induction_var","","Retrieves an induction variable given its Id.",57,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"inductionvar"}}],[11,"induction_vars","","Iterates over induction variables.",57,null],[11,"set_iteration_dim","","Sets a dimension as an iteration dimension for an instruction. Indicates if the iteration dimension was not aleady present in the set.",57,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"add_thread_dim","","Adds a thread dimension. Indicates if the the dimension was not already present in the set.",57,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"merge","","Trigger to call when two dimensions are merged.",57,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"lower_layout","","Lowers a layout into conventional memory accesses.",57,{"inputs":[{"name":"self"},{"name":"internalid"},{"generics":["id"],"name":"vec"},{"generics":["id"],"name":"vec"}],"output":null}],[11,"gen_index","","Generates an access pattern and the corresponding induction variable to access a memory block.",57,null],[11,"lower_dim_map","","Lowers a dim map into a partially defined layout.",57,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"usize"}],"output":{"generics":["lowereddimmap"],"name":"result"}}],[11,"dim_not_merged","","Trigger to call when two dimensions are not merged.",57,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"layouts_to_lower","","Returns the list of layouts to lower.",57,null],[11,"deref","","",57,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"indvarid"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"indvarid"}],"output":{"name":"ordering"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"inductionvar"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new induction var. Size represents the increment over each diemnsion taken independenly.",58,{"inputs":[{"name":"vec"},{"name":"operand"}],"output":{"name":"self"}}],[11,"merge_dims","","Renames a dimension.",58,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"base","","Returns the base operand of the induction variable.",58,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"dims","","Returns the list of induction dimensions along with the corresponding increments.",58,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instruction and type-check the operands.",59,{"inputs":[{"name":"operator"},{"name":"instid"},{"generics":["id"],"name":"hashset"},{"name":"device"}],"output":{"name":"instruction"}}],[11,"operands","","Returns the list of operands of an `Instruction`.",59,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"t","","Returns the type of the value produced by an instruction.",59,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operator","","Returns the operator of the instruction.",59,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"id","","Returns the `InstId` representing the instruction.",59,{"inputs":[{"name":"self"}],"output":{"name":"instid"}}],[11,"has_side_effects","","Returns true if the instruction has side effects.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lower_layout","","Applies the lowering of a layout to the instruction.",59,{"inputs":[{"name":"self"},{"name":"operand"},{"name":"accesspattern"},{"name":"operand"},{"name":"accesspattern"}],"output":null}],[11,"lower_dim_map","","Lowers the `DimMap` of an operand into an access to a temporary memory.",59,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"instid"},{"name":"dimmap"}],"output":null}],[11,"dim_maps_to_lower","","Indicates the operands for wich a `DimMap` must be lowered if lhs and rhs are not mapped.",59,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"as_mem_inst","","Returns 'self' if it is a memory instruction.",59,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_reduction","","Indicates if the instruction performs a reduction.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_reduction_common_dim","","Returns 'true' if `self` is a reduction initialized by init, and if 'dim' should have the same nesting with 'init' that with 'self'.",59,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"merge_dims","","Rename a dimension to another ID.",59,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"iteration_dims","","The list of dimensions the instruction must be nested in.",59,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"add_iteration_dimension","","Adds a new iteration dimension. Indicates if the dimension was not already an iteration dimension.",59,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"bb_id","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"hash","","",59,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"dimmapscope"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"dimmapscope"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"operand"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"t","","Returns the type of the `Operand`.",50,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"new_inst","","Create an operand from an instruction.",50,{"inputs":[{"name":"instruction"},{"name":"dimmap"},{"name":"dimmapscope"}],"output":{"name":"operand"}}],[11,"new_reduce","","Creates a reduce operand from an instruction and a set of dimensions to reduce on.",50,{"inputs":[{"name":"instruction"},{"name":"dimmap"},{"generics":["id"],"name":"vec"}],"output":{"name":"operand"}}],[11,"new_int","","Creates a new Int operand and checks its number of bits.",50,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"operand"}}],[11,"new_float","","Creates a new Float operand.",50,{"inputs":[{"generics":["bigint"],"name":"ratio"},{"name":"u16"}],"output":{"name":"operand"}}],[11,"merge_dims","","Renames a basic block id.",50,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"should_lower_map","","Indicates if a `DimMap` should be lowered if lhs and rhs are not mapped.",50,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"as_reduction","","If the operand is a reduction, returns the instruction initializing the reduction.",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_constant","","Indicates if the operand stays constant during the execution.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"operator"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_check","","Ensures the types of the operands are valid.",53,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[11,"t","","Returns the type of the value produced.",53,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"operands","","Retruns the list of operands.",53,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"operands_mut","","Retruns the list of mutable references to operands.",53,{"inputs":[{"name":"self"}],"output":{"generics":["operand"],"name":"vec"}}],[11,"has_side_effects","","Returns true if the operator has side effects.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_dims","","Renames a basic block.",53,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":null}],[11,"mem_access_pattern","","Returns the pattern of access to the memory by the instruction, if any.",53,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"mem_used","","Returns the memory blocks referenced by the instruction.",53,{"inputs":[{"name":"self"}],"output":{"generics":["id"],"name":"option"}}],[11,"supports_nc_access","","Indicates if the operator supports non-coherent memory accesses.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 'Size'.",60,{"inputs":[{"name":"u32"},{"generics":["parameter"],"name":"vec"},{"name":"u32"}],"output":{"name":"self"}}],[11,"as_int","","Returns the size of a dimension if it is staticaly known.",60,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"is_constant","","Indicates if the size is constant.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dividend","","Returns the dividends.",60,null],[11,"divisor","","Returns the divisor.",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"factor","","Returns the factor.",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mul_divisor","","Multiplies the divisor by the given factor.",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_factor","","Multiplies the factor by the given factor.",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_assign","","",60,{"inputs":[{"name":"self"},{"name":"size"}],"output":null}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_integer","","Returns true if the type is an integer.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_float","","Returns true if the type is a float.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len_byte","","Returns the number of bytes of the type.",54,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mem","","A module for handling accesses to the device memory.",null,null],[3,"InternalId","telamon::ir::mem","",null,null],[12,"0","","",61,null],[3,"InternalBlock","","A block of memory allocated on the device by the kernel.",null,null],[3,"ExternalBlock","","A memory block allocated by the user.",null,null],[3,"BlockMap","","Holds the blocks of memory to allocate on the device.",null,null],[4,"Id","","Uniquely identifies a block.",null,null],[13,"Internal","","",62,null],[13,"External","","",62,null],[8,"Block","","Represents a memory block.",null,null],[10,"mem_id","","The ID of the block.",63,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"as_internal","","Returns self if it is an internal memory block.",63,{"inputs":[{"name":"self"}],"output":{"generics":["internalblock"],"name":"option"}}],[10,"uses","","The list of instructions referencing the memory block.",63,null],[10,"add_use","","Add a use to the block.",63,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",62,{"inputs":[{"name":"internalid"}],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"internalblock"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"internalblock"}],"output":{"name":"bool"}}],[11,"hash","","",64,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"externalblock"}}],[11,"id","","Returns the unique identifer of the memory block.",64,{"inputs":[{"name":"self"}],"output":{"name":"internalid"}}],[11,"size","","The size of the dimensions of the memory block.",64,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"maps_dims","","Indicates if two dimensions are mapped by a temporary memory block.",64,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"mapped_dims","","Returns the list of mapped dimensions.",64,null],[11,"is_private","","Indicates if the block is privatised per block of thread.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"base_size","","Return the base size of the block, if it is statically known.",64,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"mem_id","","",64,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"as_internal","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["internalblock"],"name":"option"}}],[11,"uses","","",64,null],[11,"add_use","","",64,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"mem_id","","",65,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"uses","","",65,null],[11,"add_use","","",65,{"inputs":[{"name":"self"},{"name":"instid"}],"output":null}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"blockmap"}}],[11,"new","","Creates a new `BlocksMap`.",66,{"inputs":[{"name":"u32"}],"output":{"name":"blockmap"}}],[11,"alloc_block","","Allocates a new `Block` with the given type and sizes. Must call not merged on the dimensions that cannot be merged upon creation.",66,{"inputs":[{"name":"self"},{"name":"size"},{"name":"bool"},{"generics":["dimmap"],"name":"option"}],"output":{"name":"internalid"}}],[11,"new_tmp","","Inserts a new temporary memory. Must be inserted before not_merged is called on dimensions.",66,{"inputs":[{"name":"self"},{"name":"type"},{"name":"it"}],"output":{"name":"internalid"}}],[11,"register_use","","Registers a use of a memory block by an instruction.",66,{"inputs":[{"name":"self"},{"name":"id"},{"name":"instid"}],"output":null}],[11,"block","","Returns a block given its Id.",66,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"block_mut","","Returns a block given its Id.",66,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"block"}}],[11,"internal_block","","Returns the internal block given its ID.",66,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"internalblock"}}],[11,"internal_blocks","","Retuns the list of internal blocks.",66,null],[11,"blocks","","Returns the list of memory blocks.",66,null],[11,"merge_dims","","Rename a basic block. Returns the lyaouts to lower.",66,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"generics":["internalid"],"name":"vec"}}],[11,"not_merged","","Registers that two dimensions may not be merged. Returns a list of dimensions removed from the memory blocks and a list of layouts to lower.",66,{"inputs":[{"name":"self"},{"name":"dimension"},{"name":"id"}],"output":{"generics":["internalid"],"name":"vec"}}],[11,"lower_layout","","Lowers a fully defined layout. Returns the mapping of dimensions.",66,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"vec"}}],[0,"dim","telamon::ir","Defines iteration dimensions properties.",null,null],[3,"Id","telamon::ir::dim","Provides a unique identifier for iteration dimensions.",null,null],[12,"0","","",67,null],[3,"Map","","Represents a mapping between dimenions.",null,null],[0,"op","telamon::ir","Defines operators.",null,null],[4,"Rounding","telamon::ir::op","The rounding mode of an arithmetic operation.",null,null],[13,"Exact","","No rounding occurs.",68,null],[13,"Nearest","","Rounds toward the nearest number.",68,null],[13,"Zero","","Rounds toward zero.",68,null],[13,"Positive","","Rounds toward positive infinite.",68,null],[13,"Negative","","Rounds toward negative infinite.",68,null],[0,"prelude","telamon::ir","Defines traits to import in the environment to use the IR.",null,null],[8,"BasicBlock","telamon::ir::prelude","Represents a basic block in an Exhaust function.",null,null],[10,"bb_id","","Returns the unique identifier of the `BasicBlock`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","","Returns 'self' if it is an instruction.",69,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",69,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[8,"BasicBlock","telamon::ir","Represents a basic block in an Exhaust function.",null,null],[10,"bb_id","","Returns the unique identifier of the `BasicBlock`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bbid"}}],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",69,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",69,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"default","telamon::ir","",45,{"inputs":[],"output":{"name":"newobjs"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_instruction","","Registers a new instruction.",45,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":null}],[11,"add_mem_instruction","","Registers a new memory instruction.",45,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":null}],[11,"add_dimension","","Registers a new dimension.",45,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":null}],[11,"add_bb","","Registers a new basic block.",45,{"inputs":[{"name":"self"},{"name":"basicblock"}],"output":null}],[11,"add_iteration_dim","","Sets a dimension as a new iteration dimension.",45,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":null}],[11,"add_thread_dim","","Sets a dimension as a new thread dimension.",45,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"add_mem_block","","Registers a new memory block.",45,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":null}],[0,"model","telamon","Building Blocks for lower bound performance models.",null,null],[3,"HwPressure","telamon::model","The pressure on the hardware induced by a computation.",null,null],[3,"Nesting","","Nesting of an object.",null,null],[12,"inner_dims","","Dimensions nested inside the current BB.",70,null],[12,"inner_bbs","","Basic blocks nested inside the current BB.",70,null],[12,"outer_dims","","Dimensions nested outsidethe current BB.",70,null],[12,"before_self","","Dimensions to be processed before the current BB.",70,null],[12,"after_self","","Dimensions that should not take the current BB into account when processed.",70,null],[12,"bigger_merged_dims","","The dimensions that can be merged to this one and have a bigger ID.",70,null],[12,"num_unmapped_threads","","Number of threads that are not represented in the active dimensions of the block.",70,null],[12,"max_threads_per_block","","Maximal number of threads this block can be in, considering only outer and mapped out dimensions.",70,null],[4,"BottleneckLevel","","The level at which a bottleneck is computed.",null,null],[13,"Global","","",71,null],[13,"Block","","",71,null],[13,"Thread","","",71,null],[5,"bound","","Returns a lower bound on the execution time of all the implementation candidates in `space`, when executed in `context`.",null,{"inputs":[{"name":"searchspace"},{"name":"context"}],"output":{"name":"bound"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bottlenecklevel"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"}],"output":{"name":"ordering"}}],[11,"accounts_for_dim","","Indicates if a dimension should be taken into account for the bottleneck level.",71,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"hwpressure"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Pressure`",72,{"inputs":[{"name":"f64"},{"generics":["f64"],"name":"vec"}],"output":{"name":"self"}}],[11,"zero","","Creates a null `Pressure` for the given device.",72,{"inputs":[{"name":"device"}],"output":{"name":"self"}}],[11,"bound","","Derive a bound on the execution time from the pressure on the hardware.",72,{"inputs":[{"name":"self"},{"name":"bottlenecklevel"},{"name":"hwpressure"}],"output":{"generics":["rc"],"name":"explainedbound"}}],[11,"add_parallel","","Adds the pressure of another computation, performed in parallel.",72,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"add_sequential","","Adds the pressure of another computation, performed sequentially.",72,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"repeat_parallel","","Computes the pressure obtained by duplicating this one in parallel.",72,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"repeat_and_add_bottlenecks","","Adds the pressure of another computation, repeated in parallel. Ignores the latency.",72,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"hwpressure"}],"output":null}],[11,"repeat_sequential","","Computes the pressure obtained by repeating this one sequentially.",72,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"minimize","","Take the minimum of `self` and `other` for each bottleneck.",72,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"min","","Returns the pointwise minimum of a serie of `HwPressure`",72,{"inputs":[{"name":"it"}],"output":{"name":"option"}}],[11,"multiply","","Pointwise multiplication of the pressure on each resource.",72,{"inputs":[{"name":"self"},{"name":"hwpressure"}],"output":null}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Bound","","A lower bound on the execution time, with a detailed explanation of the origin of the bound.",null,null],[0,"search_space","telamon","Search space datastructures and constraint propagation.",null,null],[3,"Bool","telamon::search_space","",null,null],[3,"DimKind","","Specifies how iteration dimensions are implemented.",null,null],[3,"DomainStore","","Stores the domains of each variable.",null,null],[3,"InstFlag","","Specifies the version of an instruction to use.",null,null],[3,"Order","","Defines how two basic blocks are ordered.",null,null],[3,"MemSpace","","Indicates where a memory block is located.",null,null],[3,"ThreadMapping","","Indicates how are thread dimensions mapped on the GPU.",null,null],[3,"SearchSpace","","A partially specified implementation.",null,null],[4,"Action","","A decision to apply to the domain.",null,null],[13,"MemSize","","",73,null],[13,"SharedMemUsed","","",73,null],[13,"IsIterationDim","","",73,null],[13,"MemSpace","","",73,null],[13,"IncrementNumBlockDims","","",73,null],[13,"UnrollFactor","","",73,null],[13,"IncrementUnrollFactor","","",73,null],[13,"NumBlockDims","","",73,null],[13,"Order","","",73,null],[13,"DimKind","","",73,null],[13,"IsIterationDimClassCounter","","",73,null],[13,"DimMapping","","",73,null],[13,"ThreadMapping","","",73,null],[13,"IsThreadDimClassCounter","","",73,null],[13,"NumThreads","","",73,null],[13,"IsThreadDim","","",73,null],[13,"InstFlag","","",73,null],[13,"IncrementMemSize","","",73,null],[13,"NumThreadDims","","",73,null],[13,"NumNestedInst","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"domainstore"}}],[11,"new","","Creates a new domain store and allocates the variables for the given BBMap.",74,{"inputs":[{"name":"function"}],"output":{"name":"self"}}],[11,"alloc","","Allocates the choices when new objects are created.",74,{"inputs":[{"name":"self"},{"name":"function"},{"name":"newobjs"}],"output":null}],[11,"get_mem_size","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"internalid"}],"output":{"name":"halfrange"}}],[11,"get_old_mem_size","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_mem_size","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"halfrange"}],"output":null}],[11,"restrict_mem_size","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_shared_mem_used","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_shared_mem_used","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_shared_mem_used","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_shared_mem_used","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_iteration_dim","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_is_iteration_dim","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_is_iteration_dim","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_is_iteration_dim","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_mem_space","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"memspace"}}],[11,"get_old_mem_space","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"memspace"}}],[11,"set_mem_space","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"memspace"}],"output":null}],[11,"restrict_mem_space","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"memspace"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_num_block_dims","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_num_block_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_num_block_dims","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_num_block_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_unroll_factor","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"halfrange"}}],[11,"get_old_unroll_factor","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_unroll_factor","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"}],"output":null}],[11,"restrict_unroll_factor","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_unroll_factor","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_unroll_factor","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_unroll_factor","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_unroll_factor","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_block_dims","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"halfrange"}}],[11,"get_old_num_block_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_block_dims","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_block_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_order","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"}],"output":{"name":"order"}}],[11,"get_old_order","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"domaindiff"}],"output":{"name":"order"}}],[11,"set_order","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"order"}],"output":null}],[11,"restrict_order","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"bbid"},{"name":"bbid"},{"name":"order"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_dim_kind","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"dimkind"}}],[11,"get_old_dim_kind","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"dimkind"}}],[11,"set_dim_kind","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"dimkind"}],"output":null}],[11,"restrict_dim_kind","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"dimkind"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"}],"output":{"name":"range"}}],[11,"get_old_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"range"}}],[11,"set_is_iteration_dim_class_counter","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"range"}],"output":null}],[11,"restrict_is_iteration_dim_class_counter","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"id"},{"name":"range"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_dim_mapping","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"dimmapping"}}],[11,"get_old_dim_mapping","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"dimmapping"}}],[11,"set_dim_mapping","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"dimmapping"}],"output":null}],[11,"restrict_dim_mapping","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"dimmapping"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_thread_mapping","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"}],"output":{"name":"threadmapping"}}],[11,"get_old_thread_mapping","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"threadmapping"}}],[11,"set_thread_mapping","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"threadmapping"}],"output":null}],[11,"restrict_thread_mapping","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"id"},{"name":"threadmapping"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"range"}}],[11,"get_old_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"range"}}],[11,"set_is_thread_dim_class_counter","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"range"}],"output":null}],[11,"restrict_is_thread_dim_class_counter","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"range"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_threads","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_num_threads","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_threads","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_threads","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_is_thread_dim","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_is_thread_dim","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_is_thread_dim","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_is_thread_dim","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_inst_flag","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"}],"output":{"name":"instflag"}}],[11,"get_old_inst_flag","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"domaindiff"}],"output":{"name":"instflag"}}],[11,"set_inst_flag","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"instflag"}],"output":null}],[11,"restrict_inst_flag","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"instid"},{"name":"instflag"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_increment_mem_size","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"get_old_increment_mem_size","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"bool"}}],[11,"set_increment_mem_size","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"restrict_increment_mem_size","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"internalid"},{"name":"id"},{"name":"id"},{"name":"bool"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_thread_dims","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"}],"output":{"name":"halfrange"}}],[11,"get_old_num_thread_dims","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_thread_dims","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_thread_dims","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"get_num_nested_inst","","Returns the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"halfrange"}}],[11,"get_old_num_nested_inst","","Returns the domain of {name} for the given arguments. If the domain has been restricted but the change not yet applied, returns the old value.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"domaindiff"}],"output":{"name":"halfrange"}}],[11,"set_num_nested_inst","","Sets the domain of {name} for the given arguments.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"halfrange"}],"output":null}],[11,"restrict_num_nested_inst","","Restricts the domain of {name} for the given arguments. Put the old value in `diff` and indicates if the new domain is failed.",74,{"inputs":[{"name":"self"},{"name":"id"},{"name":"halfrange"},{"name":"domaindiff"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[18,"FALSE","","",75,null],[18,"TRUE","","",75,null],[18,"ALL","","",75,null],[18,"FAILED","","Returns the empty domain.",75,null],[11,"all","","Returns the full domain.",75,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",75,null],[11,"eq","","Indicates if two choices will have the same value.",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_failed","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",75,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",75,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"dimkind"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"dimkind"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[18,"VECTOR","","The dimension is implemented by using a vector instruction.",76,null],[18,"BLOCK","","The dimension is mapped to a block dimension on the device.",76,null],[18,"THREAD","","The dimension is mapped to a thread dimension on the device.",76,null],[18,"LOOP","","The dimension is implemented as a regular loop.",76,null],[18,"UNROLL","","The dimension is fully unrolled.",76,null],[18,"SEQUENTIAL","","The dimension is sequential.",76,null],[18,"PARALLEL","","The dimension is parallel.",76,null],[18,"ALL","","",76,null],[18,"FAILED","","Returns the empty domain.",76,null],[11,"all","","Returns the full domain.",76,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",76,null],[11,"eq","","Indicates if two choices will have the same value.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_failed","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"threadmapping"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"threadmapping"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"threadmapping"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[18,"MAPPED_OUT","","The two dimensions are threads, but `lhs` is mapped to a dimension outside of `rhs`.",77,null],[18,"MAPPED_IN","","The two dimensions are threads, but `lhs` is mapped to a dimension inside of `rhs`.",77,null],[18,"NOT_THREADS","","One of the dimensions is a not thread.",77,null],[18,"MAPPED","","The two dimensions are threads mapped to the same dimension on the GPU.",77,null],[18,"ALL","","",77,null],[18,"FAILED","","Returns the empty domain.",77,null],[11,"all","","Returns the full domain.",77,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",77,null],[11,"eq","","Indicates if two choices will have the same value.",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_failed","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"instflag"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"instflag"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"instflag"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[18,"MEM_NC","","Access the global memory using the read-only cache. Coherence is not guaranteed.",78,null],[18,"MEM_SHARED","","Access the shared memory.",78,null],[18,"MEM_CS","","Access the global memory without using caches.",78,null],[18,"MEM_CA","","Access the global memory using both L1 and L2 cache. Coherence is not guaranteed between blocks.",78,null],[18,"MEM_CG","","Access the global memory using the L2 cache.",78,null],[18,"MEM_BLOCK_COHERENT","","Ensure coherency within a block between memory accesses.",78,null],[18,"MEM_COHERENT","","Ensure coherency between memory accesses.",78,null],[18,"MEM_GLOBAL","","Access the global memory.",78,null],[18,"ALL","","",78,null],[18,"FAILED","","Returns the empty domain.",78,null],[11,"all","","Returns the full domain.",78,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",78,null],[11,"eq","","Indicates if two choices will have the same value.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_failed","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"memspace"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"memspace"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"memspace"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[18,"GLOBAL","","The block is in the device RAM.",79,null],[18,"SHARED","","The block is in the memory shared between the threads of a block.",79,null],[18,"ALL","","",79,null],[18,"FAILED","","Returns the empty domain.",79,null],[11,"all","","Returns the full domain.",79,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",79,null],[11,"eq","","Indicates if two choices will have the same value.",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_failed","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",79,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",79,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"order"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"order"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[18,"BEFORE","","$lhs is executed before $rhs.",80,null],[18,"AFTER","","$lhs is executed after $rhs.",80,null],[18,"INNER","","$lhs is nested inside $rhs.",80,null],[18,"OUTER","","$rhs is nested outside $rhs.",80,null],[18,"MERGED","","$lhs and $rhs are merged.",80,null],[18,"ORDERED","","$lhs and $rhs are sequentially ordered.",80,null],[18,"NESTED","","$lhs and $rhs are nested.",80,null],[18,"ALL","","",80,null],[18,"FAILED","","Returns the empty domain.",80,null],[11,"all","","Returns the full domain.",80,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Insert values in the domain.",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"list","","Lists the alternatives contained in the domain.",80,null],[11,"eq","","Indicates if two choices will have the same value.",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"neq","","Indicates if two choices cannot be equal.",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",80,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_failed","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_constrained","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"restrict","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","","",80,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"bitand_assign","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"complement","","Returns the action performing the complementary decision.",73,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"option"}}],[8,"Domain","","",null,null],[10,"is_failed","","Indicates if the domain is empty.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_constrained","","Indicates if the domain contains a single alternative.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Indicates if the domain contains another.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"restrict","","Restricts the domain to the intersection with `other`.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersects","","Indicates if the domain has an alternatve in common with `other`.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is","","Indicates if the domain is equal to another domain.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"trivalent"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"searchspace"}}],[11,"new","","Creates a new `SearchSpace` for the given `ir_instance`.",82,{"inputs":[{"name":"function"},{"generics":["action"],"name":"vec"}],"output":{"name":"result"}}],[11,"ir_instance","","Returns the underlying ir instance.",82,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"domain","","Returns the domain of choices.",82,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"domain_mut","","Allows rewritting the domain.",82,{"inputs":[{"name":"self"}],"output":{"name":"domainstore"}}],[11,"apply_decisions","","Applies a list of decisions to the domain and propagate constraints.",82,{"inputs":[{"name":"self"},{"generics":["action"],"name":"vec"}],"output":{"name":"result"}}],[11,"lower_layout","","Triggers a layout lowering.",82,{"inputs":[{"name":"self"},{"name":"internalid"},{"generics":["id"],"name":"vec"},{"generics":["id"],"name":"vec"}],"output":{"name":"result"}}],[11,"get","telamon::ir","",50,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","","",43,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir::mem","",61,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir::dim","",67,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"get","telamon::ir","",44,{"inputs":[{"name":"self"},{"name":"function"},{"name":"hashmap"}],"output":{"name":"operand"}}],[11,"ids","telamon::ir::dim","",67,{"inputs":[{"name":"self"}],"output":{"generics":["doubleendediterator"],"name":"box"}}],[11,"ids","telamon::ir","",49,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"ids","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"as_size","telamon::device","Returns the argument interpreted as an iteration dimension size, if applicable.",28,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"eval_size","","Evaluate a size.",30,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"u32"}}],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",69,{"inputs":[{"name":"self"}],"output":{"generics":["instruction"],"name":"option"}}],[11,"as_dim","","Returns 'self' if it is a dimension",69,{"inputs":[{"name":"self"}],"output":{"generics":["dimension"],"name":"option"}}],[11,"clone","telamon::ir::dim","",67,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"ordering"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","telamon::ir::op","",68,{"inputs":[{"name":"self"}],"output":{"name":"rounding"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rounding"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","telamon::model","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"intersects","telamon::search_space","Indicates if the domain has an alternatve in common with `other`.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is","","Indicates if the domain is equal to another domain.",81,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"trivalent"}}]],"paths":[[3,"InductionLevel"],[3,"InductionVar"],[4,"Cfg"],[4,"ParamVal"],[4,"ParamValKey"],[4,"AllocationScheme"],[4,"Value"],[3,"Dimension"],[3,"Function"],[3,"InternalMemBlock"],[3,"Instruction"],[3,"NameMap"],[8,"Namer"],[3,"Reduce"],[3,"TmpArray"],[3,"Builder"],[3,"SignatureBuilder"],[3,"DimSize"],[3,"TensorBuilder"],[3,"Tensor"],[3,"VirtualTensor"],[8,"AutoOperand"],[8,"MetaDimension"],[8,"MetaBasicBlock"],[3,"DimGroup"],[4,"EvalMode"],[3,"Cpu"],[3,"Context"],[8,"ScalarArgument"],[8,"ArrayArgument"],[8,"Context"],[8,"ArgMap"],[8,"AsyncEvaluator"],[8,"Device"],[3,"Candidate"],[3,"Config"],[3,"BanditConfig"],[4,"SearchAlgorithm"],[4,"NewNodeOrder"],[4,"OldNodeOrder"],[4,"ActionEx"],[3,"Signature"],[3,"Parameter"],[3,"InstId"],[3,"IndVarId"],[3,"NewObjs"],[3,"LoweredDimMap"],[4,"Stride"],[4,"AccessPattern"],[4,"BBId"],[4,"Operand"],[4,"DimMapScope"],[4,"BinOp"],[4,"Operator"],[4,"Type"],[3,"Dimension"],[3,"DimMap"],[3,"Function"],[3,"InductionVar"],[3,"Instruction"],[3,"Size"],[3,"InternalId"],[4,"Id"],[8,"Block"],[3,"InternalBlock"],[3,"ExternalBlock"],[3,"BlockMap"],[3,"Id"],[4,"Rounding"],[8,"BasicBlock"],[3,"Nesting"],[4,"BottleneckLevel"],[3,"HwPressure"],[4,"Action"],[3,"DomainStore"],[3,"Bool"],[3,"DimKind"],[3,"ThreadMapping"],[3,"InstFlag"],[3,"MemSpace"],[3,"Order"],[8,"Domain"],[3,"SearchSpace"],[6,"Bound"]]};
searchIndex["telamon_gen"] = {"doc":"","items":[[5,"process_file","telamon_gen","Process a file and stores the result in an other file.",null,{"inputs":[{"name":"path"},{"name":"path"},{"name":"bool"}],"output":{"generics":["processerror"],"name":"result"}}],[5,"process","","Parses a constraint description file.",null,{"inputs":[{"name":"read"},{"name":"t"},{"name":"bool"},{"name":"path"}],"output":{"generics":["processerror"],"name":"result"}}],[0,"ast","","Syntaxic tree for the constraint description.",null,null],[3,"Spanned","telamon_gen::ast","A F/lex's token with a span.",null,null],[12,"beg","","",0,null],[12,"end","","",0,null],[12,"data","","Spanned data",0,null],[3,"Ast","","Syntaxic tree for the constraint description.",null,null],[12,"statements","","",1,null],[3,"Quotient","","",null,null],[12,"item","","",2,null],[12,"representant","","",2,null],[12,"conditions","","",2,null],[12,"equiv_relation","","",2,null],[3,"CounterBody","","",null,null],[12,"base","","",3,null],[12,"kind","","",3,null],[12,"iter_vars","","",3,null],[12,"value","","",3,null],[12,"conditions","","",3,null],[3,"SetRef","","References a set.",null,null],[12,"name","","",4,null],[12,"var","","",4,null],[3,"VarDef","","Defines a variable.",null,null],[12,"name","","",5,null],[12,"set","","",5,null],[3,"Constraint","","A constraint that must be enforced by the IR.",null,null],[12,"forall_vars","","Variables for which the conditions must be respected.",6,null],[12,"disjunctions","","Conjunction of disjuction of condition that must be respected.",6,null],[12,"restrict_fragile","","Indicates if the constraint should restrict fragile values.",6,null],[3,"ChoiceInstance","","A reference to a choice instantiated with the given variables.",null,null],[12,"name","","",7,null],[12,"vars","","",7,null],[3,"EnumStatements","","Gathers the different statements of an enum.",null,null],[12,"values","","The values the enum can take, with the atached documentation.",8,null],[12,"aliases","","Aliases mapped to the corresponding documentation and value set.",8,null],[12,"symmetry","","Symmetry information.",8,null],[12,"constraints","","Constraints on a value.",8,null],[3,"IntegerDef","","A toplevel integer",null,null],[12,"name","","",9,null],[12,"doc","","",9,null],[12,"variables","","",9,null],[12,"code","","",9,null],[3,"EnumDef","","A toplevel definition or constraint.",null,null],[12,"name","","",10,null],[12,"doc","","",10,null],[12,"variables","","",10,null],[12,"statements","","",10,null],[3,"TriggerDef","","",null,null],[12,"foralls","","",11,null],[12,"conditions","","",11,null],[12,"code","","",11,null],[3,"CounterDef","","",null,null],[12,"name","","",12,null],[12,"doc","","",12,null],[12,"visibility","","",12,null],[12,"vars","","",12,null],[12,"body","","",12,null],[3,"SetDef","","",null,null],[12,"name","","",13,null],[12,"doc","","",13,null],[12,"arg","","",13,null],[12,"superset","","",13,null],[12,"disjoint","","",13,null],[12,"keys","","",13,null],[12,"quotient","","",13,null],[4,"Hint","","Hint is a token representation.",null,null],[13,"Set","","Set interface.",14,null],[13,"SetAttribute","","Set attribute.",14,null],[13,"Enum","","Enum interface.",14,null],[13,"EnumAttribute","","Enum attribute.",14,null],[13,"Integer","","Integer interface.",14,null],[13,"IntegerAttribute","","Integer attribute.",14,null],[4,"TypeError","","TypeEror is the error representation of telamon's",null,null],[13,"Redefinition","","Redefinition of a name and hint..",15,null],[13,"Undefined","","Undefinition of set, enum or field.",15,null],[13,"BadSymmetricArg","","Unvalid arguments of a symmetric enum.",15,null],[4,"Statement","","A toplevel definition or constraint.",null,null],[13,"IntegerDef","","",16,null],[12,"name","telamon_gen::ast::Statement","",16,null],[12,"doc","","",16,null],[12,"variables","","",16,null],[12,"code","","",16,null],[13,"EnumDef","telamon_gen::ast","Defines an enum.",16,null],[12,"name","telamon_gen::ast::Statement","",16,null],[12,"doc","","",16,null],[12,"variables","","",16,null],[12,"statements","","",16,null],[13,"TriggerDef","telamon_gen::ast","",16,null],[12,"foralls","telamon_gen::ast::Statement","",16,null],[12,"conditions","","",16,null],[12,"code","","",16,null],[13,"CounterDef","telamon_gen::ast","",16,null],[12,"name","telamon_gen::ast::Statement","",16,null],[12,"doc","","",16,null],[12,"visibility","","",16,null],[12,"vars","","",16,null],[12,"body","","",16,null],[13,"SetDef","telamon_gen::ast","",16,null],[12,"name","telamon_gen::ast::Statement","",16,null],[12,"doc","","",16,null],[12,"arg","","",16,null],[12,"superset","","",16,null],[12,"disjoint","","",16,null],[12,"keys","","",16,null],[12,"quotient","","",16,null],[13,"Require","telamon_gen::ast","",16,null],[4,"Symmetry","","Indicates if an enum exhibits symmetry.",null,null],[13,"Symmetric","","",17,null],[13,"AntiSymmetric","","",17,null],[4,"Condition","","One of the condition that has to be respected by a constraint.",null,null],[13,"Is","","",18,null],[12,"lhs","telamon_gen::ast::Condition","",18,null],[12,"rhs","","",18,null],[12,"is","","",18,null],[13,"Code","telamon_gen::ast","",18,null],[13,"Bool","","",18,null],[13,"CmpCode","","",18,null],[12,"lhs","telamon_gen::ast::Condition","",18,null],[12,"rhs","","",18,null],[12,"op","","",18,null],[13,"CmpInput","telamon_gen::ast","",18,null],[12,"lhs","telamon_gen::ast::Condition","",18,null],[12,"rhs","","",18,null],[12,"op","","",18,null],[4,"CounterVal","telamon_gen::ast","The value of a counter increment.",null,null],[13,"Code","","",19,null],[13,"Choice","","",19,null],[4,"EnumStatement","","A statement in an enum definition.",null,null],[13,"Value","","Defines a possible decision for th enum.",20,null],[13,"Alias","","Defines a set of possible decisions for the enum.",20,null],[13,"Symmetric","","Specifies that the enum is symmetric.",20,null],[13,"AntiSymmetric","","Specifies that the enum is antisymmetric and given the inverse function.",20,null],[4,"ChoiceDef","","",null,null],[13,"CounterDef","","",21,null],[13,"EnumDef","","",21,null],[13,"IntegerDef","","",21,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"hint"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"typeerror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"typeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_check","","Generate the defintion of choices and the list of constraints.",1,{"inputs":[{"name":"self"}],"output":{"generics":["spanned"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"quotient"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"counterbody"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"setref"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vardef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"constraint"}}],[11,"new","","Creates a new constraint.",6,{"inputs":[{"generics":["vardef"],"name":"vec"},{"generics":["vec"],"name":"vec"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"condition"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"choiceinstance"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"counterval"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"enumstatement"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_value","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_alias","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_alias_decisions","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"enumstatements"}}],[11,"add_statement","","Registers an `EnumStatement`.",8,{"inputs":[{"name":"self"},{"name":"enumstatement"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"integerdef"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_variables","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"enumdef"}}],[11,"check_field_name_redefinition","","A field from a enum should be unique.",10,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"check_symmetric","","An antisymmetric should refers to two same parametric.",10,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"check_undefined_value","","An Alias' value should exists.",10,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"counterdef"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"choicedef"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"choicedef"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"choicedef"}],"output":{"name":"bool"}}],[11,"get_name","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"setdef"}}],[11,"check_field_name_redefinition","","A field from a set should be unique.",13,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"check_undefined_key","","A set should always have the keys: type, id_type, id_getter, iterator, getter.",13,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"check_undefined_superset_key","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["typeerror"],"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"ir","telamon_gen","The constraint description for the ir.",null,null],[3,"Choice","telamon_gen::ir","A decision to specify.",null,null],[3,"FilterCall","","A call to a filter.",null,null],[12,"forall_vars","","",22,null],[12,"filter_ref","","",22,null],[3,"OnChangeAction","","An action to perform when the choice is restricted.",null,null],[12,"forall_vars","","",23,null],[12,"set_constraints","","",23,null],[12,"action","","",23,null],[3,"ChoiceCondition","","A condition from the point of view of a choice.",null,null],[12,"inputs","","",24,null],[12,"self_condition","","",24,null],[12,"others_conditions","","",24,null],[3,"FilterAction","","Restricts the set of valid values.",null,null],[12,"set_constraints","","",25,null],[12,"filter","","",25,null],[3,"Filter","","Filters the set valid values.",null,null],[12,"arguments","","The variables on which the filter depends.",26,null],[12,"inputs","","The choices that the filter depends on.",26,null],[12,"rules","","The filter rules.",26,null],[3,"Rule","","Specifies a conditional restriction on the set of valid values.",null,null],[12,"conditions","","The conditions that must be true for the rule to trigger.",27,null],[12,"alternatives","","The values allowed for the enum if the rule is triggered.",27,null],[12,"set_constraints","","The condition on subsets for the rule to apply.",27,null],[3,"SetConstraints","","A list of constraints on the set each variable belongs to. It must be built using `SetConstraints::new` so the constraints are in the right order.",null,null],[3,"ChoiceInstance","","An choice instantiated with the given variables.",null,null],[12,"choice","","",28,null],[12,"vars","","",28,null],[3,"Code","","A piece of rust code.",null,null],[12,"code","","",29,null],[12,"vars","","",29,null],[3,"Set","","References a set of objects.",null,null],[3,"SetRefImpl","","",null,null],[3,"SetDef","","Defines a set of objects.",null,null],[3,"Adaptator","","Represent a transformation to apply to a rule to fir it in a new context.",null,null],[3,"IrDesc","","Describes the choices that constitute the IR.",null,null],[3,"Enum","","A choice that can take a few predefined values.",null,null],[3,"Trigger","","A piece of host code called when a list of conditions are met.",null,null],[12,"foralls","","",30,null],[12,"inputs","","",30,null],[12,"conditions","","",30,null],[12,"code","","",30,null],[4,"ChoiceArguments","","Defines the parameters for which the `Choice` is defined.",null,null],[13,"Plain","","The `Choice` is defined for all comibnation of variables of the given sets Each variable can only appear once.",31,null],[12,"vars","telamon_gen::ir::ChoiceArguments","",31,null],[13,"Symmetric","telamon_gen::ir","The `Choice` is defined on a triangular space. The rests is obtained by symmetry.",31,null],[12,"names","telamon_gen::ir::ChoiceArguments","",31,null],[12,"t","","",31,null],[12,"inverse","","",31,null],[4,"ChoiceDef","telamon_gen::ir","Specifies how the `Choice` is defined.",null,null],[13,"Enum","","The `Choice` can take a small set of predefined values.",32,null],[13,"Counter","","An integer abstracted by an interval.",32,null],[12,"kind","telamon_gen::ir::ChoiceDef","",32,null],[12,"value","","",32,null],[12,"incr_iter","","",32,null],[12,"incr","","",32,null],[12,"incr_condition","","",32,null],[12,"visibility","","",32,null],[12,"base","","",32,null],[13,"Number","telamon_gen::ir","The `Choice` can take a small set of dynamically defined numeric values.",32,null],[12,"universe","telamon_gen::ir::ChoiceDef","",32,null],[4,"CounterVisibility","telamon_gen::ir","Indicates how a counter exposes how its maximum value. The variants are ordered by increasing amount of information available.",null,null],[13,"NoMax","","Only the minimal value is computed and stored.",33,null],[13,"HiddenMax","","Both the min and max are stored, but only the min is exposed.",33,null],[13,"Full","","Both the min and the max value are exposed.",33,null],[4,"CounterVal","","The value of the increments of a counter.",null,null],[13,"Code","","",34,null],[13,"Choice","","",34,null],[4,"ValueType","","Specifies the type of the values a choice can take.",null,null],[13,"Enum","","",35,null],[13,"Range","","",35,null],[13,"HalfRange","","",35,null],[13,"NumericSet","","",35,null],[4,"FilterRef","","References a filter to call.",null,null],[13,"Inline","","",36,null],[13,"Local","","",36,null],[12,"id","telamon_gen::ir::FilterRef","",36,null],[12,"args","","",36,null],[13,"Remote","telamon_gen::ir","",36,null],[12,"choice","telamon_gen::ir::FilterRef","",36,null],[12,"id","","",36,null],[12,"args","","",36,null],[4,"ChoiceAction","telamon_gen::ir","An action to perform,",null,null],[13,"FilterSelf","","",37,null],[13,"Filter","","",37,null],[12,"choice","telamon_gen::ir::ChoiceAction","",37,null],[12,"filter","","",37,null],[13,"IncrCounter","telamon_gen::ir","",37,null],[12,"choice","telamon_gen::ir::ChoiceAction","",37,null],[12,"value","","",37,null],[13,"UpdateCounter","telamon_gen::ir","",37,null],[12,"counter","telamon_gen::ir::ChoiceAction","",37,null],[12,"incr","","",37,null],[13,"Trigger","telamon_gen::ir","",37,null],[12,"id","telamon_gen::ir::ChoiceAction","",37,null],[12,"condition","","",37,null],[12,"code","","",37,null],[12,"inverse_self_cond","","",37,null],[4,"SubFilter","telamon_gen::ir","Filters the set of valid values, given some inputs.",null,null],[13,"Switch","","Enumerate the possible values that a input can take, and lists the possible values for each.",38,null],[12,"switch","telamon_gen::ir::SubFilter","",38,null],[12,"cases","","",38,null],[13,"Rules","telamon_gen::ir","Applies a set of negative rules to filter the possible values.",38,null],[4,"Variable","","",null,null],[13,"Arg","","",39,null],[13,"Forall","","",39,null],[4,"Condition","","A condition producing a boolean.",null,null],[13,"Code","","Triggers if the given piece of code returns `true`, given the mapping of variables.",40,null],[12,"code","telamon_gen::ir::Condition","",40,null],[12,"negate","","",40,null],[13,"Enum","telamon_gen::ir","Triggers if the choice can only take the given values.",40,null],[12,"input","telamon_gen::ir::Condition","",40,null],[12,"values","","",40,null],[12,"negate","","",40,null],[12,"inverse","","",40,null],[13,"Bool","telamon_gen::ir","Always or never triggers.",40,null],[13,"CmpCode","","Triggers if the one inputs respects the comparison operator with some rust code.",40,null],[12,"lhs","telamon_gen::ir::Condition","",40,null],[12,"rhs","","",40,null],[12,"op","","",40,null],[13,"CmpInput","telamon_gen::ir","Triggers if the two inputs respects the comparison operator.",40,null],[12,"lhs","telamon_gen::ir::Condition","",40,null],[12,"rhs","","",40,null],[12,"op","","",40,null],[12,"inverse","","",40,null],[4,"CmpOp","telamon_gen::ir","A compariason operator.",null,null],[13,"Lt","","",41,null],[13,"Gt","","",41,null],[13,"Leq","","",41,null],[13,"Geq","","",41,null],[13,"Eq","","",41,null],[13,"Neq","","",41,null],[4,"ValueSet","","Represents a set of values a choice can take.",null,null],[13,"Enum","","",42,null],[12,"enum_name","telamon_gen::ir::ValueSet","The enum type.",42,null],[12,"values","","A fixed set of values. Does not contains aliases.",42,null],[12,"inputs","","A set of inputs whose values can be take by the choice. Two flags indicate if the value should be negated or inversed.",42,null],[13,"Integer","telamon_gen::ir","",42,null],[12,"is_full","telamon_gen::ir::ValueSet","",42,null],[12,"cmp_inputs","","",42,null],[12,"cmp_code","","",42,null],[12,"universe","","",42,null],[4,"SetDefKey","telamon_gen::ir","",null,null],[13,"ItemType","","",43,null],[13,"IdType","","",43,null],[13,"ItemGetter","","",43,null],[13,"IdGetter","","",43,null],[13,"Iter","","",43,null],[13,"FromSuperset","","",43,null],[13,"Prefix","","",43,null],[13,"NewObjs","","",43,null],[13,"Reverse","","",43,null],[13,"AddToSet","","",43,null],[4,"CounterKind","","Indicates whether a counter sums or adds.",null,null],[13,"Add","","",44,null],[13,"Mul","","",44,null],[5,"dummy_choice","","",null,{"inputs":[],"output":{"name":"choice"}}],[5,"normalized_enum_set","","Creates a `ValueSet` from the list of enum values.",null,{"inputs":[{"name":"it"},{"name":"bool"},{"name":"bool"},{"name":"enum"}],"output":{"name":"valueset"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"adaptator"}}],[11,"from_arguments","","Creates an adaptator that maps the arguments to the given names.",45,null],[11,"variable","","Adapts a variable.",45,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"variable"}}],[11,"input","","Returns the new ID of an input and indicates if it is inversed.",45,null],[11,"set_variable","","Sets the mapping of a variable. Returns the previous mapping.",45,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"variable"}],"output":{"generics":["variable"],"name":"option"}}],[11,"set_input","","Sets the mapping of an input.",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"set_inversed","","Sets an input as inversed.",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Choice`.",46,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"option"},{"name":"choicearguments"},{"name":"choicedef"}],"output":{"name":"self"}}],[11,"name","","Returns the name of the choice, in snake_case.",46,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"doc","","Returns the documentation associated with the `Choice`.",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"arguments","","Returns the parameters for which the `Choice` is defined.",46,{"inputs":[{"name":"self"}],"output":{"name":"choicearguments"}}],[11,"value_type","","Returns the type representing the values the `Choice` can take.",46,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"choice_def","","Returns the definition of the `Choice.",46,{"inputs":[{"name":"self"}],"output":{"name":"choicedef"}}],[11,"on_change","","Returns the actions to perform when the `Choice` is constrained.",46,{"inputs":[{"name":"self"}],"output":{"generics":["onchangeaction"],"name":"iter"}}],[11,"filter_actions","","Returns the actions to run to get the valid alternatives of the choice.",46,{"inputs":[{"name":"self"}],"output":{"generics":["filteraction"],"name":"iter"}}],[11,"filters","","Returns the filters operating on the `Choice`.",46,{"inputs":[{"name":"self"}],"output":{"generics":["filter"],"name":"iter"}}],[11,"add_filter_action","","Adds a filter to run on initialization.",46,{"inputs":[{"name":"self"},{"name":"filteraction"}],"output":null}],[11,"add_onchange","","Adds an action to perform when the `Choice` is constrained.",46,{"inputs":[{"name":"self"},{"name":"onchangeaction"}],"output":null}],[11,"add_filter","","Adds a filter to the `Choice`, returns an ID to indentify it.",46,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"usize"}}],[11,"fragile_values","","Returns the values that should not be automatically restricted by filters.",46,{"inputs":[{"name":"self"}],"output":{"name":"valueset"}}],[11,"add_fragile_values","","Extends the list of values that should not be automatically propagated by filters.",46,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `ChoiceArguments`.",31,{"inputs":[{"name":"vec"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"names","","Returns the name of the arguments.",31,null],[11,"sets","","Returns the sets of the arguments.",31,null],[11,"get","","Returns the name and set of the argument at the given position.",31,null],[11,"iter","","Iterates over the arguments, with their sets and names.",31,null],[11,"is_symmetric","","Indicates if the arguments iteration domain is triangular.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of arguments.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"choicedef"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"countervisibility"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"countervisibility"}],"output":{"name":"ordering"}}],[11,"value_type","","Returns the underlying value type.",32,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"is_counter","","Indicates if the choice is a counter.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_enum","","Returns the name of the `Enum` the `Choice` is based on.",32,{"inputs":[{"name":"self"}],"output":{"generics":["rcstr"],"name":"option"}}],[11,"is_valid_operator","","Indicates the comparison operators that can be applied to the decision.",32,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"counterval"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",34,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"full_type","","Returns the full type, instead of a the trimmed one.",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_enum","","Returns the enum name, if applicable.",35,{"inputs":[{"name":"self"}],"output":{"generics":["rcstr"],"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"adapt","","",35,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"filtercall"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",22,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"filterref"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",36,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"onchangeaction"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"adapt","","",23,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"choiceaction"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"variables","","Returns the list of variables to allocate.",37,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"inputs","","Returns the list of inputs used by the action.",37,null],[11,"inverse_self","","Inverse references to the value of the choice the action is registered in.",37,{"inputs":[{"name":"self"}],"output":null}],[11,"adapt","","",37,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"choicecondition"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Adapt the list of conditions to be from the point of view of the given choice.",24,null],[11,"adapt","","",24,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"filteraction"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"subfilter"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rule"}}],[11,"instantiate","","Instantiates the rule for a given assignment of the inputs.",27,null],[11,"normalize","","Normalizes the `Rule`.",27,null],[11,"adapt","","",27,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"setconstraints"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"setconstraints"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"setconstraints"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"setconstraints"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"new","","Create a new list of set constraints. The constraints are put in a normalized and legal order.",47,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"constraints","","Returns the constraints in a legal order.",47,null],[11,"is_empty","","Indicates if the set of constraints is empty.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find_set","","Returns the set the given variable is constrained to, if any.",47,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["set"],"name":"option"}}],[11,"adapt","","",47,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"into_iter","","",47,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"variable"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"ordering"}}],[11,"adapt","","",39,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"choiceinstance"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"choiceinstance"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"choiceinstance"}],"output":{"name":"bool"}}],[11,"normalize","","Normalizes the `ChoiceInstance` and indicates if the corresponding input should be inversed.",28,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":{"name":"bool"}}],[11,"adapt","","",28,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"ordering"}}],[11,"normalize","","Normalizes the `Code.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"adapt","","",29,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"condition"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"ordering"}}],[11,"negate","","Negates the condition.",40,{"inputs":[{"name":"self"}],"output":null}],[11,"alternatives_of","","Returns allowed alternatives for the given input. Returns None if the condition is not on the given input.",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"valuetype"},{"name":"irdesc"}],"output":{"generics":["valueset"],"name":"option"}}],[11,"instantiate","","Instantiate the condition in the given context.",40,null],[11,"evaluate","","Evaluates the condition. Requires the mapping to be instantiated.",40,null],[11,"normalize","","Normalizes the condition to make it easier to apply equality on it.",40,null],[11,"adapt","","",40,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"cmpop"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"cmpop"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"negate","","Negates the operator.",41,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse","","Returns the equivalent operator for when the operator are inversed.",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allows_eq","","Indicates if the operator returns true when both operands are equals.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"evaluate","","Evaluates the operator on the given `ValueSet`s.",41,{"inputs":[{"name":"self"},{"name":"valueset"},{"name":"valueset"}],"output":{"name":"trivalent"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"valueset"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"empty","","Creates an enmpty `ValueSet` of the given type.",42,{"inputs":[{"name":"valuetype"}],"output":{"name":"self"}}],[11,"from_properties","","Computes a `ValueSet` from the properties it must respect.",42,{"inputs":[{"name":"valuetype"},{"name":"bool"},{"name":"bool"},{"name":"irdesc"}],"output":{"name":"self"}}],[11,"enum_values","","Creates a `ValueSet` from a normalized set of values.",42,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"btreeset"}],"output":{"name":"self"}}],[11,"from_input","","Creates a `ValueSet` from the given input.",42,{"inputs":[{"name":"valuetype"},{"name":"usize"},{"name":"cmpop"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_empty","","Indicates if the set of values is empty.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","Indicates if the set contains all the values. This functions is pessimistic: the set may contain all the values and the function still return false.",42,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":{"name":"bool"}}],[11,"is_constrained","","Indicates if the set contains a single value.",42,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[11,"extend","","Extends the `ValueSet` with the values of anther set.",42,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":null}],[11,"intersect","","Intersects the `ValueSet` with the given values. Indicates if the intersection was successful or if the sets should be kept separate.",42,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"bool"}}],[11,"instantiate","","Instantiates the `ValueSet` for a given input assignment.",42,{"inputs":[{"name":"self"},{"name":"hashmap"},{"name":"irdesc"}],"output":{"name":"self"}}],[11,"inverse","","Inverse the `ValueSet`. The choice must be antisymmetric.",42,{"inputs":[{"name":"self"},{"name":"irdesc"}],"output":null}],[11,"is","","Indicates if the `ValueSet` will be contained into anoter after instantiation. Requires both `self` and `other` to be instantiated.",42,{"inputs":[{"name":"self"},{"name":"valueset"}],"output":{"name":"trivalent"}}],[11,"t","","Returns the type of the values.",42,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"adapt","","",42,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"set"}}],[11,"hash","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new set instance.",48,{"inputs":[{"name":"rc"},{"generics":["variable"],"name":"option"}],"output":{"name":"self"}}],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second, without matching argument names.",48,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"get_collision_level","","Returns the common superset where the two set might have an object in common.",48,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"generics":["setdef"],"name":"option"}}],[11,"reverse","","Returns a superset of this set and a set parametrized by elements of the superset that iterates on the possible parameters of this set given a variable of the superset.",48,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"set"}],"output":{"name":"option"}}],[11,"adapt","","",48,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"setrefimpl"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"setrefimpl"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"def","","",49,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[11,"arg","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[11,"reverse_constraint","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[11,"new","","Creates a new set definition.",50,{"inputs":[{"name":"string"},{"generics":["set"],"name":"option"},{"generics":["set"],"name":"option"},{"name":"option"},{"generics":["setdefkey","string"],"name":"hashmap"},{"generics":["string"],"name":"vec"}],"output":{"name":"rc"}}],[11,"name","","The name of the set.",50,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"arg","","Returns the argument of the set, if any.",50,{"inputs":[{"name":"self"}],"output":{"generics":["set"],"name":"option"}}],[11,"superset","","Returns the superset of the set, if any.",50,{"inputs":[{"name":"self"}],"output":{"generics":["set"],"name":"option"}}],[11,"attributes","","The attributes of the set.",50,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"prefix","","Suggest a prefix for variables in the set.",50,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"def_order","","Returns an integer that indicates an order in which variables can be defined to always be defined before any argument of the set they belong into.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second.",50,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"bool"}}],[11,"hash","","",50,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"setdef"}],"output":{"name":"ordering"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"setdefkey"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"setdefkey"}}],[11,"env","","Returns the variables defined for the key.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"vec"}}],[11,"is_arg_in_env","","Indicates if the environement contains the set argument.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"REQUIRED","","The list of required keys.",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"SetRef","","Generic trait for sets.",null,null],[10,"def","","Returns the set definition.",51,{"inputs":[{"name":"self"}],"output":{"name":"setdef"}}],[10,"arg","","Returns the argument of the set, if any.",51,{"inputs":[{"name":"self"}],"output":{"generics":["variable"],"name":"option"}}],[10,"reverse_constraint","","A constraint on the variables to iterate on, issued from a set reversal.",51,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"without_reverse_constraints","","Returns the same set but without reverse constraints.",51,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"superset","","Returns the direct superset of this set, if any.",51,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"path_to_superset","","Returns the path of sets to access a super-set.",51,{"inputs":[{"name":"self"},{"name":"setref"}],"output":{"generics":["setrefimpl"],"name":"vec"}}],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",51,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",51,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[8,"Adaptable","","",null,null],[10,"adapt","","Adapts the object to the new environement.",52,{"inputs":[{"name":"self"},{"name":"adaptator"}],"output":{"name":"self"}}],[11,"add_choice","","Adds a `Choice` to the IR description.",53,{"inputs":[{"name":"self"},{"name":"choice"}],"output":null}],[11,"add_enum","","Adds an `Enum` to the IR desctiption.",53,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"choices","","List the choice definitions.",53,null],[11,"enums","","List the enum definitions.",53,null],[11,"get_enum","","Returns the enum with the given name.",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enum"}}],[11,"get_choice","","Returns the choice with the given name.",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"choice"}}],[11,"set_defs","","Iterates over all the sets.",53,null],[11,"add_set_def","","Register a set definition.",53,{"inputs":[{"name":"self"},{"generics":["setdef"],"name":"rc"}],"output":null}],[11,"get_set_def","","Returns the set definition associated with a name.",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"rc"}}],[11,"add_filter","","Adds a filter to a choice.",53,{"inputs":[{"name":"self"},{"name":"rcstr"},{"name":"filter"},{"generics":["set"],"name":"vec"},{"name":"setconstraints"}],"output":null}],[11,"add_onchange","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"onchangeaction"}],"output":null}],[11,"add_trigger","","Adds a trigger to a choice.",53,{"inputs":[{"name":"self"},{"name":"trigger"}],"output":{"name":"usize"}}],[11,"triggers","","Iterates on the triggers.",53,null],[11,"adapt_env","","Generates the list of sets to iterate and to constraints to iterate on the given context, but from the point of view of the given choice instance.",53,null],[11,"adapt_env_ext","","Generates the list of sets to iterate and to constraints to iterate on the given environement, but from the point of view of the given choice instance. The new foralls iterating on current arguments are returned in a separate list than the ones issued from foralls.",53,null],[11,"default","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"counterkind"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"counterkind"}],"output":{"name":"bool"}}],[11,"zero","","Returns the neutral element of the operand.",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new enum definition.",54,{"inputs":[{"name":"rcstr"},{"generics":["rcstr"],"name":"option"},{"generics":["vec"],"name":"option"}],"output":{"name":"self"}}],[11,"name","","Returns the name of the enum.",54,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"add_value","","Adds a possible value to the enum.",54,{"inputs":[{"name":"self"},{"name":"rcstr"},{"generics":["string"],"name":"option"}],"output":null}],[11,"add_alias","","Adds an alias to the enum possible values.",54,{"inputs":[{"name":"self"},{"name":"rcstr"},{"generics":["rcstr"],"name":"hashset"},{"generics":["string"],"name":"option"}],"output":null}],[11,"aliases","","Lists the aliases.",54,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"doc","","Returns the documentation associated with the enum.",54,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"values","","Returns the values the enum can take, and their associated comment.",54,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"expand","","Replaces aliases by the corresponding values.",54,{"inputs":[{"name":"self"},{"name":"it"}],"output":{"generics":["rcstr"],"name":"hashset"}}],[11,"inverse","","Inverse an antisymmetric value.",54,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"inverse_mapping","","Returns the mapping to apply to obtain the symmetric of a value.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"lexer","telamon_gen","",null,null],[3,"Position","telamon_gen::lexer","A sequence's row/column position",null,null],[12,"line","","",55,null],[12,"column","","",55,null],[3,"Spanned","","A F/lex's token with a span.",null,null],[12,"beg","","",0,null],[12,"end","","",0,null],[12,"data","","Spanned data",0,null],[3,"Span","","A double sequence's row/column position",null,null],[12,"beg","","",56,null],[12,"end","","",56,null],[3,"Lexer","","",null,null],[4,"Token","","",null,null],[13,"InvalidToken","","",57,null],[13,"ValueIdent","","",57,null],[13,"ChoiceIdent","","",57,null],[13,"Var","","",57,null],[13,"Doc","","",57,null],[13,"CmpOp","","",57,null],[13,"Code","","",57,null],[13,"CounterKind","","",57,null],[13,"Bool","","",57,null],[13,"CounterVisibility","","",57,null],[13,"And","","",57,null],[13,"Trigger","","",57,null],[13,"When","","",57,null],[13,"Alias","","",57,null],[13,"Counter","","",57,null],[13,"Define","","",57,null],[13,"Enum","","",57,null],[13,"Equal","","",57,null],[13,"Forall","","",57,null],[13,"In","","",57,null],[13,"Is","","",57,null],[13,"Not","","",57,null],[13,"Require","","",57,null],[13,"Requires","","",57,null],[13,"Value","","",57,null],[13,"End","","",57,null],[13,"Symmetric","","",57,null],[13,"AntiSymmetric","","",57,null],[13,"Arrow","","",57,null],[13,"Colon","","",57,null],[13,"Comma","","",57,null],[13,"LParen","","",57,null],[13,"RParen","","",57,null],[13,"BitOr","","",57,null],[13,"Or","","",57,null],[13,"SetDefKey","","",57,null],[13,"Set","","",57,null],[13,"SubsetOf","","",57,null],[13,"SetIdent","","",57,null],[13,"Base","","",57,null],[13,"Disjoint","","",57,null],[13,"Quotient","","",57,null],[13,"Of","","",57,null],[13,"Divide","","",57,null],[13,"Integer","","",57,null],[4,"LexicalError","","",null,null],[13,"InvalidToken","","",58,null],[13,"UnexpectedToken","","",58,null],[11,"default","","",55,{"inputs":[],"output":{"name":"position"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"span"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","telamon_gen::ast","",0,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","telamon_gen::lexer","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"SpannedLexer","","The alias Spanned is a definition of the stream format. The parser will accept an iterator where each item in the stream has the following structure.",null,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"lexicalerror"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"description","","",58,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",59,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"from","","",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"drop","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"parser","telamon_gen","",null,null],[5,"parse_ast","telamon_gen::parser","",null,{"inputs":[{"name":"__tokens"}],"output":{"generics":["ast","parseerror"],"name":"result"}}],[8,"__ToTriple","","",null,null],[16,"Error","","",60,null],[10,"to_triple","","",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","telamon_gen::ir","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","telamon_gen","",null,null],[3,"ProcessError","telamon_gen::error","",null,null],[12,"path","","Display of filename.",61,null],[12,"span","","Position of lexeme.",61,null],[4,"Cause","","",null,null],[13,"Parse","","Lalrpop",62,null],[13,"Other","","Will be remplaced by field for Ast [...]",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"without_reverse_constraints","telamon_gen::ir","Returns the same set but without reverse constraints.",51,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}],[11,"superset","","Returns the direct superset of this set, if any.",51,{"inputs":[{"name":"self"}],"output":{"generics":["setrefimpl"],"name":"option"}}],[11,"path_to_superset","","Returns the path of sets to access a super-set.",51,{"inputs":[{"name":"self"},{"name":"setref"}],"output":{"generics":["setrefimpl"],"name":"vec"}}],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",51,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",51,{"inputs":[{"name":"self"}],"output":{"name":"setrefimpl"}}]],"paths":[[3,"Spanned"],[3,"Ast"],[3,"Quotient"],[3,"CounterBody"],[3,"SetRef"],[3,"VarDef"],[3,"Constraint"],[3,"ChoiceInstance"],[3,"EnumStatements"],[3,"IntegerDef"],[3,"EnumDef"],[3,"TriggerDef"],[3,"CounterDef"],[3,"SetDef"],[4,"Hint"],[4,"TypeError"],[4,"Statement"],[4,"Symmetry"],[4,"Condition"],[4,"CounterVal"],[4,"EnumStatement"],[4,"ChoiceDef"],[3,"FilterCall"],[3,"OnChangeAction"],[3,"ChoiceCondition"],[3,"FilterAction"],[3,"Filter"],[3,"Rule"],[3,"ChoiceInstance"],[3,"Code"],[3,"Trigger"],[4,"ChoiceArguments"],[4,"ChoiceDef"],[4,"CounterVisibility"],[4,"CounterVal"],[4,"ValueType"],[4,"FilterRef"],[4,"ChoiceAction"],[4,"SubFilter"],[4,"Variable"],[4,"Condition"],[4,"CmpOp"],[4,"ValueSet"],[4,"SetDefKey"],[4,"CounterKind"],[3,"Adaptator"],[3,"Choice"],[3,"SetConstraints"],[3,"Set"],[3,"SetRefImpl"],[3,"SetDef"],[8,"SetRef"],[8,"Adaptable"],[3,"IrDesc"],[3,"Enum"],[3,"Position"],[3,"Span"],[4,"Token"],[4,"LexicalError"],[3,"Lexer"],[8,"__ToTriple"],[3,"ProcessError"],[4,"Cause"]]};
searchIndex["telamon_gen_test"] = {"doc":"","items":[],"paths":[]};
searchIndex["telamon_kernels"] = {"doc":"Defines common kernels used to test and benchmark Telamon.","items":[[5,"analyze_bounds","telamon_kernels","Prints an analysis of the bounds computed by the lower bound model.",null,{"inputs":[{"generics":["boundsample"],"name":"vec"}],"output":null}],[0,"linalg","","Linera algebra kernels.",null,null],[3,"Axpy","telamon_kernels::linalg","Computes `z = alpha*x+y`.",null,null],[3,"MatVec","","Computes `y = A.x`.",null,null],[3,"Gesummv","","Computes `y = (alpha*A + beta*B).x`.",null,null],[3,"MatMul","","Computes `C = A.B`.",null,null],[12,"params","","",0,null],[3,"MatMulP","","",null,null],[12,"m","","",1,null],[12,"n","","",1,null],[12,"k","","",1,null],[12,"a_stride","","",1,null],[12,"transpose_a","","",1,null],[12,"transpose_b","","",1,null],[12,"generic","","",1,null],[3,"BatchMM","","Batch transposed matrix-matrix multiplication.",null,null],[3,"BatchMMP","","",null,null],[12,"m","","",2,null],[12,"n","","",2,null],[12,"k","","",2,null],[12,"batch","","",2,null],[12,"transpose_a","","",2,null],[12,"transpose_b","","",2,null],[12,"batch_b","","",2,null],[12,"generic","","",2,null],[11,"name","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",3,null],[11,"build_body","","",3,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"get_expected_output","","",3,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"arrayd"}}],[11,"check_result","","",3,null],[11,"name","","",4,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",4,null],[11,"build_body","","",4,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"get_expected_output","","",4,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array1"}}],[11,"check_result","","",4,null],[11,"name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",5,null],[11,"build_body","","",5,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"get_expected_output","","",5,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array1"}}],[11,"check_result","","",5,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matmulp"}}],[11,"new","","",1,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"transpose_a","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"transpose_b","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stride_a","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"static_sizes","","Inline the sizes in the generated code.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",0,{"inputs":[{"name":"matmulp"},{"name":"signaturebuilder"}],"output":{"name":"self"}}],[11,"build_body","","",0,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"get_expected_output","","",0,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array2"}}],[11,"check_result","","",0,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"batchmmp"}}],[11,"new","","",2,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"transpose_a","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"transpose_b","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"static_sizes","","Generate code that is onyl valid for the given sizes. The batch size is still generic.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reuse_b","","Reuse the `B` matrix across the batch.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"build_signature","","",6,{"inputs":[{"name":"batchmmp"},{"name":"signaturebuilder"}],"output":{"name":"self"}}],[11,"build_body","","",6,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[11,"get_expected_output","","",6,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"array3"}}],[11,"check_result","","",6,null],[0,"statistics","telamon_kernels","Statistical analysis for benchmarking.",null,null],[3,"Estimate","telamon_kernels::statistics","Estimates a mean within a confidence interval.",null,null],[12,"unit","","",7,null],[12,"value","","",7,null],[12,"interval","","",7,null],[12,"confidence","","",7,null],[5,"mean","","Computes the mean of a data set.",null,null],[5,"estimate_mean","","Computes the mean and the confidence interval of the data set. The requested degree of confidence must be between 0 and 1.",null,{"inputs":[{"generics":["f64"],"name":"vec"},{"name":"f64"},{"name":"str"}],"output":{"name":"estimate"}}],[5,"estimate_ratio","","Computes the error margin of a ratio between answer of a binary choice given the number of samples with a 95% confidence interval.",null,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"estimate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Kernel","telamon_kernels","A kernel that can be compiled, benchmarked and used for correctness tests.",null,null],[16,"Parameters","","The input parameters of the kernel.",8,null],[16,"ExpectedOutput","","The values to expect as output.",8,null],[10,"name","","The name of the function computed by the kernel.",8,{"inputs":[],"output":{"name":"str"}}],[10,"build_signature","","Builds the signature of the kernel in the builder and returns an object that stores enough information to later build the kernel body and check its result. The `is_generic` flag indicates if th sizes should be instantiated.",8,null],[10,"build_body","","Builder the kernel body in the given builder. This builder should be based on the signature created by `build_signature`.",8,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"context"}],"output":{"generics":["candidate"],"name":"vec"}}],[10,"get_expected_output","","Computes the expected output.",8,null],[10,"check_result","","Ensures the generated code performs the correct operation.",8,null],[11,"test_correctness","","Generates, executes and tests the output of candidates for the kernel.",8,null],[11,"test_bound","","Tests the correctness of the bound of kernels and returns the list of tested leafs along with the actual evaluation time.",8,null],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",8,null],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when descending in the search tree.",8,null],[8,"Scalar","","A scalar that can be used as the data type for tests.",null,null],[11,"epsilon","","Returns the amount of allowed error in tests.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_err_ok","","Indicates if the scalar can be considered as zero in the context of error checking.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"test_correctness","","Generates, executes and tests the output of candidates for the kernel.",8,null],[11,"test_bound","","Tests the correctness of the bound of kernels and returns the list of tested leafs along with the actual evaluation time.",8,null],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",8,null],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when descending in the search tree.",8,null]],"paths":[[3,"MatMul"],[3,"MatMulP"],[3,"BatchMMP"],[3,"Axpy"],[3,"MatVec"],[3,"Gesummv"],[3,"BatchMM"],[3,"Estimate"],[8,"Kernel"],[8,"Scalar"]]};
searchIndex["telamon_utils"] = {"doc":"Generic helper functions.","items":[[3,"Cache","telamon_utils","A thread-safe LRU Cache.",null,null],[3,"Dag","","A directed acyclic graph given by adjacency list.",null,null],[3,"FilterList","","Iterates over a linked list while removing some items.",null,null],[3,"ZipCopy","","Zip copies of an object with an iterator.",null,null],[3,"PartialPermutations","","",null,null],[3,"VecSet","","A set backed by an ordered vector.",null,null],[3,"RcStr","","A reference counted string, compatible with `&str`.",null,null],[4,"Trivalent","","Booleans enhanced with a third `Maybe` value.",null,null],[13,"False","","",0,null],[13,"Maybe","","",0,null],[13,"True","","",0,null],[5,"filter_list","","Iterates over a linked list while removing some items.",null,{"inputs":[{"name":"linkedlist"},{"name":"f"}],"output":{"name":"filterlist"}}],[5,"zip_copy","","Zip copies of an object with an iterator.",null,{"inputs":[{"name":"i"},{"name":"t"}],"output":{"name":"zipcopy"}}],[5,"at_most_one","","Ensures an iterator has at most one element.",null,{"inputs":[{"name":"it"}],"output":{"name":"option"}}],[5,"to_map","","Transforms an iterator into an `HashMap`. Redundant nodes are merged using `merge`.",null,{"inputs":[{"name":"it"},{"name":"m"}],"output":{"name":"hashmap"}}],[5,"div_ceil","","Performs an integer divison rounded to the upper number.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"log2_u32","","Returns the log2 of a power of 2.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[5,"clone_pair","","Clones a pair of reference.",null,null],[5,"cmp_f64","","Compare two f64, panic if one of them is nan",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Cache` that can store `capacity` elements.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","Returns the element associated to `key` in the cache. Generates the element with `gen` and store it in the cache if it is not already present.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"arc"}}],[11,"clear","","Removes all elements from the `Cache`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_order","","Computes a minimal DAG from a partial order.",2,{"inputs":[{"name":"vec"},{"name":"c"}],"output":{"name":"dag"}}],[11,"nodes","","Returns the list of nodes, in increasing order.",2,null],[11,"before","","Returns the predecessors of the given node.",2,null],[11,"after","","Returns the successors of the given node.",2,null],[11,"minima","","Returns the id of nodes without predecessors.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"predecessors","","Returns all the predecessors of a node.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[0,"ndarray","","An array with a variable number of dimensions.",null,null],[3,"NDArray","telamon_utils::ndarray","An array with a variable number of dimensions.",null,null],[12,"dims","","",3,null],[3,"NDRange","","A N-dimentional range.",null,null],[3,"ViewMut","","A mutable view on a `NDArray`, with some dimensions fixed.",null,null],[3,"ViewMutIter","","Iterator over the elements in a mutable view.",null,null],[3,"ViewIterMut","","Mutable iterator over the elements in a mutable view.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a NDArray and initializes it with the generator.",3,{"inputs":[{"generics":["usize"],"name":"vec"},{"name":"vec"}],"output":{"name":"ndarray"}}],[11,"init_default","","Initializes an NDArray with default values.",3,{"inputs":[{"generics":["usize"],"name":"vec"}],"output":{"name":"self"}}],[11,"num_dims","","Returns the number of dimensions in the array.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"view_mut","","Returns a mutable view on the NDArray.",3,{"inputs":[{"name":"self"}],"output":{"name":"viewmut"}}],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"new","","Creates a ND range with the given bounds.",4,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_dims","","Returns the number of non-fixed dimensions in the view.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split","","Splits the view on the given dimension.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["viewmut"],"name":"vec"}}],[11,"enumerate","","Enumerates the elements with their indexes.",5,null],[11,"enumerate_mut","","Produces mutable references to the elements, with their indexes.",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","telamon_utils","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Returns an iterator of the partial permuations of size `k` of values. Permutations are returned in lexicographical order.",10,{"inputs":[{"name":"it"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[0,"multimap","","A `HashMap` with mutiple values for each key.",null,null],[3,"MultiHashMap","telamon_utils::multimap","A `HashMap` with mutiple values for each key.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"multihashmap"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `MultiHashMap`.",11,{"inputs":[],"output":{"generics":["randomstate"],"name":"multihashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",11,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"multihashmap"}}],[11,"with_hasher","","Creates an empty `MultiHashMap` which will use the given hash builder to hash keys.",11,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty `MultiHashMap` with space for at least `capacity`  elements, using `hasher` to hash the keys.",11,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `MultiHashMap`. The collection may reserve more space to avoid frequent reallocations.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.",11,null],[11,"values_mut","","An iterator visitinf all values mutably in arbitrary order.",11,null],[11,"iter","","Iterates over all the keys and returns the associated values.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"iter"}}],[11,"num_keys","","Returns the number of keys.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Indicates if the map contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"drain"}}],[11,"clear","","Clears the map, removing all keys and values.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns the values mapped to the key.",11,null],[11,"contains_key","","Indicates if the map contains a value for the specified key.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns an iterator over mutable reference to the values mapped to the key.",11,null],[11,"insert","","Inserts new value to the map.",11,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"insert_many","","Inserts new value to the map.",11,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove","","Removes all the elements bound to a key.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"vec"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",11,null],[11,"into_iter","","",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","telamon_utils","",12,{"inputs":[{"name":"self"}],"output":{"name":"vecset"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"new","","Creates a new `VecSet` with the given data.",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"is_empty","","Indicates if the `VecSet` is empty.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the set.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Iterates over the set, in order.",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Returns the elements in self but not in other.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"difference"}}],[11,"intersection","","Returns a set containing the elements present in both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"intersection"}}],[11,"intersect","","In-place intersection with another `VecSet`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":null}],[11,"union","","Returns a set containing the elements present in either self`or`other`.",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"name":"vecset"}}],[11,"filter","","Returns a new `VecSet` with only the elements for which the predicate returned `true`.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"retain","","Filters out elements for wich the predicate returns false.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"insert","","Inserts an element in the `VecSet`. This operation has a complexity in O(n). Returns `false` if the item was already present.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"vecset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into_iter","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"it"}],"output":{"name":"self"}}],[11,"deref","","",12,null],[0,"unwrap","","A macro to help debug unwraps.",null,null],[8,"Unwrap","telamon_utils::unwrap","",null,null],[16,"Output","","The type retruned by unwraping.",13,null],[10,"unwrap","","Unwraps the value or panics with the given message.",13,null],[6,"DefaultHasher","telamon_utils","A fast but not secure `Hasher`.",null,null],[6,"HashSet","","An `HashSet` based on `DefaultHasher`.",null,null],[6,"HashMap","","An `HashMap` based on `DefaultHasher`.",null,null],[6,"MultiHashMap","","A `HashMap` based on `DefaultHasher`.",null,null],[8,"BuilderTrait","","A trait that implements useful methods on builders.",null,null],[11,"doif","","Runs the closure if the bool is true.",14,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"f"}],"output":{"name":"self"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"rcstr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new reference-counted string.",15,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"borrow","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"rcstr"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bool","","Returns the boolean represented.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"maybe_true","","Returns `true` if the underlying boolean might be `true`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_false","","Returns `true` if the underlying boolean might be `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_true","","Returns `true` if the underlying boolean is `true`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_false","","Returns `true` if the underlying boolean is `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_maybe","","Returns `true` if the underlying boolean might be `true` and `false`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"trivalent"}}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"name":"trivalent"}],"output":{"name":"trivalent"}}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trivalent"}}],[14,"unwrap","","Panics after if the value cannot be unwraped.",null,null],[14,"generated_file","","Includes a generates file into the current file.",null,null],[14,"eq_from_key","","Defines equality from a key.",null,null],[14,"hash_from_key","","Defines equality and hash from a key.",null,null]],"paths":[[4,"Trivalent"],[3,"Cache"],[3,"Dag"],[3,"NDArray"],[3,"NDRange"],[3,"ViewMut"],[3,"ViewMutIter"],[3,"ViewIterMut"],[3,"FilterList"],[3,"ZipCopy"],[3,"PartialPermutations"],[3,"MultiHashMap"],[3,"VecSet"],[8,"Unwrap"],[8,"BuilderTrait"],[3,"RcStr"]]};
initSearch(searchIndex);
